{
    "project": {
        "name": "yocto-api",
        "description": "Yocto REST API",
        "version": "0.1.0",
        "url": ""
    },
    "files": {
        "apidoc/utils/handlebars_helper.js": {
            "name": "apidoc/utils/handlebars_helper.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "apidoc/utils/send_sample_request.js": {
            "name": "apidoc/utils/send_sample_request.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "apidoc/vendor/path-to-regexp/index.js": {
            "name": "apidoc/vendor/path-to-regexp/index.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "apidoc/vendor/lodash.min.js": {
            "name": "apidoc/vendor/lodash.min.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "apidoc/handlebars_helper.js": {
            "name": "apidoc/handlebars_helper.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "apidoc/main.js": {
            "name": "apidoc/main.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "app/models/controller.js": {
            "name": "app/models/controller.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "app/routes/controller.js": {
            "name": "app/routes/controller.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/app/apidocGenerator/temp/apiDoc.js": {
            "name": "src/app/apidocGenerator/temp/apiDoc.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/app/apidocGenerator/generator.js": {
            "name": "src/app/apidocGenerator/generator.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/app/models/controller.js": {
            "name": "src/app/models/controller.js",
            "modules": {},
            "classes": {
                "ControllerModels": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/app/routes/controller.js": {
            "name": "src/app/routes/controller.js",
            "modules": {},
            "classes": {
                "ControllerRoutes": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/app/defaultMessage.js": {
            "name": "src/app/defaultMessage.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        }
    },
    "modules": {},
    "classes": {
        "ControllerModels": {
            "name": "ControllerModels",
            "shortname": "ControllerModels",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/app/models/controller.js",
            "line": 12,
            "description": "Yocto API : Models Controller\n\nController of models, laod models from a json file\n\nAll models are save in an array and are accessible by calling method getModel\n\nFor more details on these dependencies read links below :\n- LodAsh : https://lodash.com/\n- yocto-logger : git+ssh://lab.yocto.digital:yocto-node-modules/yocto-utils.git\n- mongoose : http://mongoosejs.com/",
            "date": ": 11/05/2015",
            "author": ": Cedric Balard <cedric@yocto.re>",
            "copyright": ": Yocto SAS, All right reserved"
        },
        "ControllerRoutes": {
            "name": "ControllerRoutes",
            "shortname": "ControllerRoutes",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/app/routes/controller.js",
            "line": 30,
            "description": "Yocto API : Routes Controller\n\nController of routes based on Express\n\nIt read a jsonfile and create each route\n\nCors Express is enable to permit test with apidocjs\n\nFor more details on these dependencies read links below :\n- LodAsh : https://lodash.com/\n- yocto-logger : git+ssh://lab.yocto.digital:yocto-node-modules/yocto-utils.git\n- express : http://expressjs.com/\n- joi : https://github.com/hapijs/joi#array",
            "date": ": 11/05/2015",
            "author": ": Cedric Balard <cedric@yocto.re>",
            "copyright": ": Yocto SAS, All right reserved"
        }
    },
    "classitems": [
        {
            "file": "apidoc/utils/handlebars_helper.js",
            "line": 7,
            "description": "start/stop timer for simple performance check.",
            "class": "ControllerModels"
        },
        {
            "file": "apidoc/utils/handlebars_helper.js",
            "line": 21,
            "description": "Return localized Text.",
            "params": [
                {
                    "name": "string",
                    "description": "text"
                }
            ],
            "class": "ControllerModels"
        },
        {
            "file": "apidoc/utils/handlebars_helper.js",
            "line": 29,
            "description": "Console log.",
            "params": [
                {
                    "name": "mixed",
                    "description": "obj"
                }
            ],
            "class": "ControllerModels"
        },
        {
            "file": "apidoc/utils/handlebars_helper.js",
            "line": 38,
            "description": "Replace underscore with space.",
            "params": [
                {
                    "name": "string",
                    "description": "text"
                }
            ],
            "class": "ControllerModels"
        },
        {
            "file": "apidoc/utils/handlebars_helper.js",
            "line": 46,
            "class": "ControllerModels"
        },
        {
            "file": "apidoc/utils/handlebars_helper.js",
            "line": 59,
            "class": "ControllerModels"
        },
        {
            "file": "apidoc/utils/handlebars_helper.js",
            "line": 66,
            "class": "ControllerModels"
        },
        {
            "file": "apidoc/utils/handlebars_helper.js",
            "line": 81,
            "class": "ControllerModels"
        },
        {
            "file": "apidoc/utils/handlebars_helper.js",
            "line": 96,
            "class": "ControllerModels"
        },
        {
            "file": "apidoc/utils/handlebars_helper.js",
            "line": 109,
            "class": "ControllerModels"
        },
        {
            "file": "apidoc/utils/handlebars_helper.js",
            "line": 116,
            "class": "ControllerModels"
        },
        {
            "file": "apidoc/utils/handlebars_helper.js",
            "line": 124,
            "description": "Convert Newline to HTML-Break (nl2br).",
            "params": [
                {
                    "name": "text",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "ControllerModels"
        },
        {
            "file": "apidoc/utils/handlebars_helper.js",
            "line": 134,
            "class": "ControllerModels"
        },
        {
            "file": "apidoc/utils/handlebars_helper.js",
            "line": 159,
            "class": "ControllerModels"
        },
        {
            "file": "apidoc/utils/handlebars_helper.js",
            "line": 187,
            "class": "ControllerModels"
        },
        {
            "file": "apidoc/utils/handlebars_helper.js",
            "line": 194,
            "class": "ControllerModels"
        },
        {
            "file": "apidoc/utils/handlebars_helper.js",
            "line": 201,
            "class": "ControllerModels"
        },
        {
            "file": "apidoc/utils/handlebars_helper.js",
            "line": 226,
            "class": "ControllerModels"
        },
        {
            "file": "apidoc/utils/handlebars_helper.js",
            "line": 296,
            "description": "Overwrite Colors",
            "class": "ControllerModels"
        },
        {
            "file": "apidoc/utils/send_sample_request.js",
            "line": 151,
            "description": "Exports.",
            "class": "ControllerModels"
        },
        {
            "file": "apidoc/vendor/path-to-regexp/index.js",
            "line": 5,
            "description": "Expose `pathToRegexp`.",
            "class": "ControllerModels"
        },
        {
            "file": "apidoc/vendor/path-to-regexp/index.js",
            "line": 10,
            "description": "The main path matching regexp utility.",
            "type": "{RegExp}",
            "class": "ControllerModels"
        },
        {
            "file": "apidoc/vendor/path-to-regexp/index.js",
            "line": 29,
            "description": "Escape the capturing group by escaping special characters and meaning.",
            "params": [
                {
                    "name": "group",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "ControllerModels"
        },
        {
            "file": "apidoc/vendor/path-to-regexp/index.js",
            "line": 39,
            "description": "Attach the keys as a property of the regexp.",
            "params": [
                {
                    "name": "re",
                    "description": "",
                    "type": "RegExp"
                },
                {
                    "name": "keys",
                    "description": "",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "",
                "type": "RegExp"
            },
            "class": "ControllerModels"
        },
        {
            "file": "apidoc/vendor/path-to-regexp/index.js",
            "line": 51,
            "description": "Get the flags for a regexp from the options.",
            "params": [
                {
                    "name": "options",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "ControllerModels"
        },
        {
            "file": "apidoc/vendor/path-to-regexp/index.js",
            "line": 61,
            "description": "Pull out keys from a regexp.",
            "params": [
                {
                    "name": "path",
                    "description": "",
                    "type": "RegExp"
                },
                {
                    "name": "keys",
                    "description": "",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "",
                "type": "RegExp"
            },
            "class": "ControllerModels"
        },
        {
            "file": "apidoc/vendor/path-to-regexp/index.js",
            "line": 86,
            "description": "Transform an array into a regexp.",
            "params": [
                {
                    "name": "path",
                    "description": "",
                    "type": "Array"
                },
                {
                    "name": "keys",
                    "description": "",
                    "type": "Array"
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "RegExp"
            },
            "class": "ControllerModels"
        },
        {
            "file": "apidoc/vendor/path-to-regexp/index.js",
            "line": 105,
            "description": "Replace the specific tags with regexp strings.",
            "params": [
                {
                    "name": "path",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "keys",
                    "description": "",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "ControllerModels"
        },
        {
            "file": "apidoc/vendor/path-to-regexp/index.js",
            "line": 152,
            "description": "Normalize the given path string, returning a regular expression.\n\nAn empty array can be passed in for the keys, which will hold the\nplaceholder key descriptions. For example, using `/user/:id`, `keys` will\ncontain `[{ name: 'id', delimiter: '/', optional: false, repeat: false }]`.",
            "params": [
                {
                    "name": "path",
                    "description": "",
                    "type": "(String|RegExp|Array)"
                },
                {
                    "name": "keys",
                    "description": "",
                    "type": "Array",
                    "optional": true
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "Object",
                    "optional": true
                }
            ],
            "return": {
                "description": "",
                "type": "RegExp"
            },
            "class": "ControllerModels"
        },
        {
            "file": "apidoc/vendor/lodash.min.js",
            "line": 1,
            "license": "Lo-Dash 2.4.1 (Custom Build) lodash.com/license | Underscore.js 1.5.2 underscorejs.org/LICENSE\nBuild: `lodash -o ./dist/lodash.compat.js`",
            "class": "ControllerModels"
        },
        {
            "file": "apidoc/handlebars_helper.js",
            "line": 7,
            "description": "start/stop timer for simple performance check.",
            "class": "ControllerModels"
        },
        {
            "file": "apidoc/handlebars_helper.js",
            "line": 21,
            "description": "Return localized Text.",
            "params": [
                {
                    "name": "string",
                    "description": "text"
                }
            ],
            "class": "ControllerModels"
        },
        {
            "file": "apidoc/handlebars_helper.js",
            "line": 29,
            "description": "Console log.",
            "params": [
                {
                    "name": "mixed",
                    "description": "obj"
                }
            ],
            "class": "ControllerModels"
        },
        {
            "file": "apidoc/handlebars_helper.js",
            "line": 38,
            "description": "Replace underscore with space.",
            "params": [
                {
                    "name": "string",
                    "description": "text"
                }
            ],
            "class": "ControllerModels"
        },
        {
            "file": "apidoc/handlebars_helper.js",
            "line": 46,
            "class": "ControllerModels"
        },
        {
            "file": "apidoc/handlebars_helper.js",
            "line": 59,
            "class": "ControllerModels"
        },
        {
            "file": "apidoc/handlebars_helper.js",
            "line": 66,
            "class": "ControllerModels"
        },
        {
            "file": "apidoc/handlebars_helper.js",
            "line": 81,
            "class": "ControllerModels"
        },
        {
            "file": "apidoc/handlebars_helper.js",
            "line": 96,
            "class": "ControllerModels"
        },
        {
            "file": "apidoc/handlebars_helper.js",
            "line": 109,
            "class": "ControllerModels"
        },
        {
            "file": "apidoc/handlebars_helper.js",
            "line": 116,
            "class": "ControllerModels"
        },
        {
            "file": "apidoc/handlebars_helper.js",
            "line": 124,
            "description": "Convert Newline to HTML-Break (nl2br).",
            "params": [
                {
                    "name": "text",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "ControllerModels"
        },
        {
            "file": "apidoc/handlebars_helper.js",
            "line": 134,
            "class": "ControllerModels"
        },
        {
            "file": "apidoc/handlebars_helper.js",
            "line": 159,
            "class": "ControllerModels"
        },
        {
            "file": "apidoc/handlebars_helper.js",
            "line": 187,
            "class": "ControllerModels"
        },
        {
            "file": "apidoc/handlebars_helper.js",
            "line": 194,
            "class": "ControllerModels"
        },
        {
            "file": "apidoc/handlebars_helper.js",
            "line": 201,
            "class": "ControllerModels"
        },
        {
            "file": "apidoc/handlebars_helper.js",
            "line": 226,
            "class": "ControllerModels"
        },
        {
            "file": "apidoc/handlebars_helper.js",
            "line": 296,
            "description": "Overwrite Colors",
            "class": "ControllerModels"
        },
        {
            "file": "apidoc/main.js",
            "line": 340,
            "description": "Check if Parameter (sub) List has a type Field.\nExample: @apiSuccess          varname1 No type.",
            "apisuccess": "{String} varname2 With type.",
            "params": [
                {
                    "name": "fields",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "ControllerModels"
        },
        {
            "file": "apidoc/main.js",
            "line": 356,
            "description": "On Template changes, recall plugins.",
            "class": "ControllerModels"
        },
        {
            "file": "apidoc/main.js",
            "line": 460,
            "description": "Change version of an article to compare it to an other version.",
            "class": "ControllerModels"
        },
        {
            "file": "apidoc/main.js",
            "line": 556,
            "description": "Compare all currently selected Versions with their predecessor.",
            "class": "ControllerModels"
        },
        {
            "file": "apidoc/main.js",
            "line": 577,
            "description": "Add article settings.",
            "class": "ControllerModels"
        },
        {
            "file": "apidoc/main.js",
            "line": 605,
            "description": "Render Article.",
            "class": "ControllerModels"
        },
        {
            "file": "apidoc/main.js",
            "line": 624,
            "description": "Render original Article and remove the current visible Article.",
            "class": "ControllerModels"
        },
        {
            "file": "apidoc/main.js",
            "line": 643,
            "description": "Load google fonts.",
            "class": "ControllerModels"
        },
        {
            "file": "apidoc/main.js",
            "line": 660,
            "description": "Return ordered entries by custom order and append not defined entries to the end.",
            "params": [
                {
                    "name": "elements",
                    "description": "",
                    "type": "String[]"
                },
                {
                    "name": "order",
                    "description": "",
                    "type": "String[]"
                },
                {
                    "name": "splitBy",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Custom ordered list.",
                "type": "String[]"
            },
            "class": "ControllerModels"
        },
        {
            "file": "app/models/controller.js",
            "line": 33,
            "description": "Array of Object that contains all models",
            "itemtype": "property",
            "name": "tabModel",
            "type": "Array",
            "default": "empty",
            "class": "ControllerModels"
        },
        {
            "file": "app/models/controller.js",
            "line": 42,
            "description": "Create a new model and add it in tabModel",
            "itemtype": "method",
            "name": "addModel",
            "params": [
                {
                    "name": "nameModel",
                    "description": "name of the model",
                    "type": "String"
                },
                {
                    "name": "model",
                    "description": "the model (formated in json)",
                    "type": "Object"
                }
            ],
            "class": "ControllerModels"
        },
        {
            "file": "app/models/controller.js",
            "line": 69,
            "description": "Initialise the Controller</br>\nRead models.json and load all models",
            "itemtype": "method",
            "name": "init",
            "class": "ControllerModels"
        },
        {
            "file": "app/models/controller.js",
            "line": 90,
            "description": "Get model from models.json and format it with mongoose",
            "params": [
                {
                    "name": "nameModel",
                    "description": "the name of model to retrieve",
                    "type": "String"
                }
            ],
            "return": {
                "description": "return the model if founded, or false otherwise",
                "type": "Object"
            },
            "class": "ControllerModels"
        },
        {
            "file": "app/models/controller.js",
            "line": 113,
            "description": "Export current Controller to use it on node",
            "class": "ControllerModels"
        },
        {
            "file": "app/routes/controller.js",
            "line": 13,
            "description": "List of all default property in a mongodb document\nyoct",
            "itemtype": "property",
            "name": "DEFAULT_PROP_MONGODB",
            "type": "Array",
            "default": "[ '__v', '_id']",
            "class": "ControllerRoutes"
        },
        {
            "file": "app/routes/controller.js",
            "line": 54,
            "description": "List of all http request",
            "itemtype": "property",
            "name": "ALL_HTTP_REQUESTS",
            "type": "Array",
            "default": "[ 'post', 'get', 'put', 'patch', 'delete', 'head']",
            "class": "ControllerRoutes"
        },
        {
            "file": "app/routes/controller.js",
            "line": 62,
            "description": "Model's Controller, is the controller that will use to retrieve a model",
            "itemtype": "property",
            "name": "models",
            "type": "Object",
            "default": "require '../models/controller.js'",
            "class": "ControllerRoutes"
        },
        {
            "file": "app/routes/controller.js",
            "line": 70,
            "description": "The main router",
            "itemtype": "property",
            "name": "router",
            "type": "Object",
            "default": "require '../models/controller.js'",
            "class": "ControllerRoutes"
        },
        {
            "file": "app/routes/controller.js",
            "line": 80,
            "description": "Test if string is defined </br>\nUsed to dertermine if we call find() or findById()",
            "itemtype": "method",
            "name": "getFn",
            "params": [
                {
                    "name": "varToTest",
                    "description": "the var to test",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "return 'find' if varToTest is undefined, otherwise 'findById'",
                "type": "String"
            },
            "class": "ControllerRoutes"
        },
        {
            "file": "app/routes/controller.js",
            "line": 96,
            "description": "Implement the http request : GET and HEAD</br>\nGet an object </br>\nSend a error to the client if the request failed, or a json file to the client with the data requested if it's an GET requerst </br>\nOR if it's a head request, send a http header",
            "itemtype": "method",
            "name": "get",
            "params": [
                {
                    "name": "model",
                    "description": "the data model object",
                    "type": "Object"
                },
                {
                    "name": "path",
                    "description": "the root path",
                    "type": "String"
                },
                {
                    "name": "paramToGet",
                    "description": "The property to retrieve on url",
                    "type": "String"
                },
                {
                    "name": "reqType",
                    "description": "type of the http req (get or head)",
                    "type": "String"
                }
            ],
            "class": "ControllerRoutes"
        },
        {
            "file": "app/routes/controller.js",
            "line": 131,
            "description": "Implement the http request : PUT, PATCH and DELETE</br>\nGet an object </br>\nsend a message to the client",
            "itemtype": "method",
            "name": "get",
            "params": [
                {
                    "name": "model",
                    "description": "the data model object",
                    "type": "Object"
                },
                {
                    "name": "path",
                    "description": "the root path",
                    "type": "String"
                },
                {
                    "name": "paramToGet",
                    "description": "The property to retrieve on url",
                    "type": "String"
                },
                {
                    "name": "reqType",
                    "description": "type of the http req (put, patch or head)",
                    "type": "String"
                }
            ],
            "class": "ControllerRoutes"
        },
        {
            "file": "app/routes/controller.js",
            "line": 162,
            "description": "Update the model, it's used for : PUT and PATCH\nGet an object </br>\nsend a message to the client",
            "itemtype": "method",
            "name": "get",
            "params": [
                {
                    "name": "model",
                    "description": "the data model object",
                    "type": "Object"
                },
                {
                    "name": "res",
                    "description": "the http response",
                    "type": "Object"
                },
                {
                    "name": "req",
                    "description": "the http request",
                    "type": "Object"
                },
                {
                    "name": "paramToGet",
                    "description": "The property to retrieve on url",
                    "type": "String"
                },
                {
                    "name": "reqType",
                    "description": "type of the http req (put, patch or head)",
                    "type": "String"
                },
                {
                    "name": "scope",
                    "description": "scope of the Controller",
                    "type": "Object"
                }
            ],
            "class": "ControllerRoutes"
        },
        {
            "file": "app/routes/controller.js",
            "line": 199,
            "description": "delete the model, it's used for : DELETE </br>\nDelete an object </br>\nSend a error to the client if the request failed, otherwise a json file to the client with the data",
            "itemtype": "method",
            "name": "delete",
            "params": [
                {
                    "name": "model",
                    "description": "the data model object",
                    "type": "Object"
                },
                {
                    "name": "res",
                    "description": "the http response",
                    "type": "Object"
                },
                {
                    "name": "req",
                    "description": "the http request",
                    "type": "Object"
                },
                {
                    "name": "paramToGet",
                    "description": "The property to retrieve on url to delete the object",
                    "type": "String"
                }
            ],
            "class": "ControllerRoutes"
        },
        {
            "file": "app/routes/controller.js",
            "line": 224,
            "description": "Save an object in db, it's used for : PUT, PATCH and POST </br>\nSend a error to the client if the request failed, otherwise a json file to the client with the data",
            "itemtype": "method",
            "name": "delete",
            "params": [
                {
                    "name": "model",
                    "description": "the data model object",
                    "type": "Object"
                },
                {
                    "name": "res",
                    "description": "the http response",
                    "type": "Object"
                },
                {
                    "name": "req",
                    "description": "the http request",
                    "type": "Object"
                },
                {
                    "name": "paramToGet",
                    "description": "The property to retrieve on url to delete the object",
                    "type": "String"
                }
            ],
            "class": "ControllerRoutes"
        },
        {
            "file": "app/routes/controller.js",
            "line": 248,
            "description": "Implement the http request : POST </br>\nAdd a new Object in DB </br>\nSend a error to the client if the request failed, otherwise a json file to the client with the data",
            "itemtype": "method",
            "name": "post",
            "params": [
                {
                    "name": "Model",
                    "description": "the data model object (Model start with an uppercase for jshint validation)",
                    "type": "Object"
                },
                {
                    "name": "path",
                    "description": "the root path",
                    "type": "String"
                }
            ],
            "class": "ControllerRoutes"
        },
        {
            "file": "app/routes/controller.js",
            "line": 285,
            "description": "Check if the parameter should not be empty </br>\nAnd if it's the case, add a validation step into mongoose",
            "itemtype": "method",
            "name": "checkModelValidation",
            "params": [
                {
                    "name": "val",
                    "description": "the value",
                    "type": "Object"
                },
                {
                    "name": "value",
                    "description": "the object",
                    "type": "Object"
                },
                {
                    "name": "key",
                    "description": "the key of the value",
                    "type": "String"
                }
            ],
            "class": "ControllerRoutes"
        },
        {
            "file": "app/routes/controller.js",
            "line": 312,
            "description": "Add a route to the main router",
            "itemtype": "method",
            "name": "addRoute",
            "params": [
                {
                    "name": "path",
                    "description": "route to add",
                    "type": "String"
                },
                {
                    "name": "nameModel",
                    "description": "name of the model object to retrieve into the controller of model",
                    "type": "String"
                },
                {
                    "name": "reqExcluded",
                    "description": "array of excluded request",
                    "type": "Array"
                },
                {
                    "name": "paramToRetrieve",
                    "description": "name of the param to retrieve",
                    "type": "String"
                }
            ],
            "class": "ControllerRoutes"
        },
        {
            "file": "app/routes/controller.js",
            "line": 356,
            "description": "Add a middleware",
            "itemtype": "method",
            "name": "addMidlleware",
            "class": "ControllerRoutes"
        },
        {
            "file": "app/routes/controller.js",
            "line": 385,
            "description": "Initialise the controller </br>\nRetrieve all routes and thoose alias and add there into router",
            "itemtype": "method",
            "name": "init",
            "class": "ControllerRoutes"
        },
        {
            "file": "app/routes/controller.js",
            "line": 442,
            "description": "Export current Controller to use it on node",
            "class": "ControllerRoutes"
        },
        {
            "file": "src/app/apidocGenerator/temp/apiDoc.js",
            "line": 1,
            "api": "{put} /user/:user_id PUT one User",
            "apigroup": "user",
            "apiversion": "0.1.0",
            "apipermission": "admin",
            "apidescription": "Method to put all property of a user in database",
            "apiparam": "{[ObjectId]} [cart_id]  cart_id(s) of the user",
            "apisuccess": "{String} message request success",
            "apisuccessexample": "userSuccess-Response:\n     HTTP/1.1 200 OK\n     {\n       \"message\" : \"request success\"\n     }",
            "apierrorexample": "userNotFound:\n     HTTP/1.1 400\n     {\n       \"error\" : \" Failed put a user\"\n     }",
            "apierror": "{String} error Failed put a user",
            "class": "ControllerModels"
        },
        {
            "file": "src/app/apidocGenerator/generator.js",
            "line": 13,
            "description": "Generator of comments for apidocjs (www.apidocjs.com)\n\nThis generator will generate a comments file based on an EJS template and lot of model (define in json)\n\nThe comments file once generated will be execute in a apidocjs process for generate an Api Web Documentation\n\nApidocjs will provide also an interface for testing all REST request\n\n\nFor more details on these dependencies read links below :\n- LodAsh : https://lodash.com/\n- yocto-logger : git+ssh://lab.yocto.digital:yocto-node-modules/yocto-utils.git\n- glob : https://www.npmjs.com/package/glob\n- fs : https://nodejs.org/api/fs.html\n- path : https://nodejs.org/api/path.html\n- ejs : https://www.npmjs.com/package/ejs\n- lineByLineReader : https://www.npmjs.com/package/line-by-line",
            "date": ": 26/05/2015",
            "author": ": BALARD, Cédric cedric@yocto.re",
            "copyright": ": YOCTO SAS, All rights reversed <http://www.yocto.re>",
            "class": "ControllerModels"
        },
        {
            "file": "src/app/apidocGenerator/generator.js",
            "line": 76,
            "description": "Create the whole comments based on templates and models\nAdd this into the comments file",
            "itemtype": "method",
            "name": "createApiFile",
            "params": [
                {
                    "name": "theTemplate",
                    "description": "[description]",
                    "type": "Object"
                },
                {
                    "name": "jsonModel",
                    "description": "[description]",
                    "type": "Object"
                }
            ],
            "class": "ControllerModels"
        },
        {
            "file": "src/app/models/controller.js",
            "line": 32,
            "description": "Array of Object that contains all models",
            "itemtype": "property",
            "name": "tabModel",
            "type": "Array",
            "default": "empty",
            "class": "ControllerModels"
        },
        {
            "file": "src/app/models/controller.js",
            "line": 41,
            "description": "Create a new model and add it in tabModel",
            "itemtype": "method",
            "name": "addModel",
            "params": [
                {
                    "name": "nameModel",
                    "description": "name of the model",
                    "type": "String"
                },
                {
                    "name": "model",
                    "description": "the model (formated in json)",
                    "type": "Object"
                }
            ],
            "class": "ControllerModels"
        },
        {
            "file": "src/app/models/controller.js",
            "line": 68,
            "description": "Initialise the Controller</br>\nRead models.json and load all models",
            "itemtype": "method",
            "name": "init",
            "class": "ControllerModels"
        },
        {
            "file": "src/app/models/controller.js",
            "line": 89,
            "description": "Get model from models.json and format it with mongoose",
            "params": [
                {
                    "name": "nameModel",
                    "description": "the name of model to retrieve",
                    "type": "String"
                }
            ],
            "return": {
                "description": "return the model if founded, or false otherwise",
                "type": "Object"
            },
            "class": "ControllerModels"
        },
        {
            "file": "src/app/models/controller.js",
            "line": 112,
            "description": "Export current Controller to use it on node",
            "class": "ControllerModels"
        },
        {
            "file": "src/app/routes/controller.js",
            "line": 13,
            "description": "List of all default property in a mongodb document\nyoct",
            "itemtype": "property",
            "name": "DEFAULT_PROP_MONGODB",
            "type": "Array",
            "default": "[ '__v', '_id']",
            "class": "ControllerRoutes"
        },
        {
            "file": "src/app/routes/controller.js",
            "line": 54,
            "description": "List of all http request",
            "itemtype": "property",
            "name": "ALL_HTTP_REQUESTS",
            "type": "Array",
            "default": "[ 'post', 'get', 'put', 'patch', 'delete', 'head']",
            "class": "ControllerRoutes"
        },
        {
            "file": "src/app/routes/controller.js",
            "line": 62,
            "description": "Model's Controller, is the controller that will use to retrieve a model",
            "itemtype": "property",
            "name": "models",
            "type": "Object",
            "default": "require '../models/controller.js'",
            "class": "ControllerRoutes"
        },
        {
            "file": "src/app/routes/controller.js",
            "line": 70,
            "description": "The main router",
            "itemtype": "property",
            "name": "router",
            "type": "Object",
            "default": "require '../models/controller.js'",
            "class": "ControllerRoutes"
        },
        {
            "file": "src/app/routes/controller.js",
            "line": 80,
            "description": "Test if string is defined </br>\nUsed to dertermine if we call find() or findById()",
            "itemtype": "method",
            "name": "getFn",
            "params": [
                {
                    "name": "varToTest",
                    "description": "the var to test",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "return 'find' if varToTest is undefined, otherwise 'findById'",
                "type": "String"
            },
            "class": "ControllerRoutes"
        },
        {
            "file": "src/app/routes/controller.js",
            "line": 96,
            "description": "Implement the http request : GET and HEAD</br>\nGet an object </br>\nSend a error to the client if the request failed, or a json file to the client with the data requested if it's an GET requerst </br>\nOR if it's a head request, send a http header",
            "itemtype": "method",
            "name": "get",
            "params": [
                {
                    "name": "model",
                    "description": "the data model object",
                    "type": "Object"
                },
                {
                    "name": "path",
                    "description": "the root path",
                    "type": "String"
                },
                {
                    "name": "paramToGet",
                    "description": "The property to retrieve on url",
                    "type": "String"
                },
                {
                    "name": "reqType",
                    "description": "type of the http req (get or head)",
                    "type": "String"
                }
            ],
            "class": "ControllerRoutes"
        },
        {
            "file": "src/app/routes/controller.js",
            "line": 131,
            "description": "Implement the http request : PUT, PATCH and DELETE</br>\nGet an object </br>\nsend a message to the client",
            "itemtype": "method",
            "name": "get",
            "params": [
                {
                    "name": "model",
                    "description": "the data model object",
                    "type": "Object"
                },
                {
                    "name": "path",
                    "description": "the root path",
                    "type": "String"
                },
                {
                    "name": "paramToGet",
                    "description": "The property to retrieve on url",
                    "type": "String"
                },
                {
                    "name": "reqType",
                    "description": "type of the http req (put, patch or head)",
                    "type": "String"
                }
            ],
            "class": "ControllerRoutes"
        },
        {
            "file": "src/app/routes/controller.js",
            "line": 162,
            "description": "Update the model, it's used for : PUT and PATCH\nGet an object </br>\nsend a message to the client",
            "itemtype": "method",
            "name": "get",
            "params": [
                {
                    "name": "model",
                    "description": "the data model object",
                    "type": "Object"
                },
                {
                    "name": "res",
                    "description": "the http response",
                    "type": "Object"
                },
                {
                    "name": "req",
                    "description": "the http request",
                    "type": "Object"
                },
                {
                    "name": "paramToGet",
                    "description": "The property to retrieve on url",
                    "type": "String"
                },
                {
                    "name": "reqType",
                    "description": "type of the http req (put, patch or head)",
                    "type": "String"
                },
                {
                    "name": "scope",
                    "description": "scope of the Controller",
                    "type": "Object"
                }
            ],
            "class": "ControllerRoutes"
        },
        {
            "file": "src/app/routes/controller.js",
            "line": 199,
            "description": "delete the model, it's used for : DELETE </br>\nDelete an object </br>\nSend a error to the client if the request failed, otherwise a json file to the client with the data",
            "itemtype": "method",
            "name": "delete",
            "params": [
                {
                    "name": "model",
                    "description": "the data model object",
                    "type": "Object"
                },
                {
                    "name": "res",
                    "description": "the http response",
                    "type": "Object"
                },
                {
                    "name": "req",
                    "description": "the http request",
                    "type": "Object"
                },
                {
                    "name": "paramToGet",
                    "description": "The property to retrieve on url to delete the object",
                    "type": "String"
                }
            ],
            "class": "ControllerRoutes"
        },
        {
            "file": "src/app/routes/controller.js",
            "line": 224,
            "description": "Save an object in db, it's used for : PUT, PATCH and POST </br>\nSend a error to the client if the request failed, otherwise a json file to the client with the data",
            "itemtype": "method",
            "name": "delete",
            "params": [
                {
                    "name": "model",
                    "description": "the data model object",
                    "type": "Object"
                },
                {
                    "name": "res",
                    "description": "the http response",
                    "type": "Object"
                },
                {
                    "name": "req",
                    "description": "the http request",
                    "type": "Object"
                },
                {
                    "name": "paramToGet",
                    "description": "The property to retrieve on url to delete the object",
                    "type": "String"
                }
            ],
            "class": "ControllerRoutes"
        },
        {
            "file": "src/app/routes/controller.js",
            "line": 248,
            "description": "Implement the http request : POST </br>\nAdd a new Object in DB </br>\nSend a error to the client if the request failed, otherwise a json file to the client with the data",
            "itemtype": "method",
            "name": "post",
            "params": [
                {
                    "name": "Model",
                    "description": "the data model object (Model start with an uppercase for jshint validation)",
                    "type": "Object"
                },
                {
                    "name": "path",
                    "description": "the root path",
                    "type": "String"
                }
            ],
            "class": "ControllerRoutes"
        },
        {
            "file": "src/app/routes/controller.js",
            "line": 285,
            "description": "Check if the parameter should not be empty </br>\nAnd if it's the case, add a validation step into mongoose",
            "itemtype": "method",
            "name": "checkModelValidation",
            "params": [
                {
                    "name": "val",
                    "description": "the value",
                    "type": "Object"
                },
                {
                    "name": "value",
                    "description": "the object",
                    "type": "Object"
                },
                {
                    "name": "key",
                    "description": "the key of the value",
                    "type": "String"
                }
            ],
            "class": "ControllerRoutes"
        },
        {
            "file": "src/app/routes/controller.js",
            "line": 312,
            "description": "Add a route to the main router",
            "itemtype": "method",
            "name": "addRoute",
            "params": [
                {
                    "name": "path",
                    "description": "route to add",
                    "type": "String"
                },
                {
                    "name": "nameModel",
                    "description": "name of the model object to retrieve into the controller of model",
                    "type": "String"
                },
                {
                    "name": "reqExcluded",
                    "description": "array of excluded request",
                    "type": "Array"
                },
                {
                    "name": "paramToRetrieve",
                    "description": "name of the param to retrieve",
                    "type": "String"
                }
            ],
            "class": "ControllerRoutes"
        },
        {
            "file": "src/app/routes/controller.js",
            "line": 356,
            "description": "Add a middleware",
            "itemtype": "method",
            "name": "addMidlleware",
            "class": "ControllerRoutes"
        },
        {
            "file": "src/app/routes/controller.js",
            "line": 385,
            "description": "Initialise the controller </br>\nRetrieve all routes and thoose alias and add there into router",
            "itemtype": "method",
            "name": "init",
            "class": "ControllerRoutes"
        },
        {
            "file": "src/app/routes/controller.js",
            "line": 442,
            "description": "Export current Controller to use it on node",
            "class": "ControllerRoutes"
        },
        {
            "file": "src/app/defaultMessage.js",
            "line": 1,
            "description": "Creator of message",
            "class": ""
        }
    ],
    "warnings": [
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " apidoc/utils/handlebars_helper.js:124"
        },
        {
            "message": "unknown tag: license",
            "line": " apidoc/vendor/lodash.min.js:1"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " apidoc/handlebars_helper.js:124"
        },
        {
            "message": "unknown tag: apisuccess",
            "line": " apidoc/main.js:340"
        },
        {
            "message": "unknown tag: date",
            "line": " app/models/controller.js:13"
        },
        {
            "message": "unknown tag: copyright",
            "line": " app/models/controller.js:13"
        },
        {
            "message": "unknown tag: date",
            "line": " app/routes/controller.js:30"
        },
        {
            "message": "unknown tag: copyright",
            "line": " app/routes/controller.js:30"
        },
        {
            "message": "unknown tag: api",
            "line": " src/app/apidocGenerator/temp/apiDoc.js:1"
        },
        {
            "message": "unknown tag: apigroup",
            "line": " src/app/apidocGenerator/temp/apiDoc.js:1"
        },
        {
            "message": "unknown tag: apiversion",
            "line": " src/app/apidocGenerator/temp/apiDoc.js:1"
        },
        {
            "message": "unknown tag: apipermission",
            "line": " src/app/apidocGenerator/temp/apiDoc.js:1"
        },
        {
            "message": "unknown tag: apidescription",
            "line": " src/app/apidocGenerator/temp/apiDoc.js:1"
        },
        {
            "message": "unknown tag: apiparam",
            "line": " src/app/apidocGenerator/temp/apiDoc.js:1"
        },
        {
            "message": "unknown tag: apisuccess",
            "line": " src/app/apidocGenerator/temp/apiDoc.js:1"
        },
        {
            "message": "unknown tag: apisuccess",
            "line": " src/app/apidocGenerator/temp/apiDoc.js:1"
        },
        {
            "message": "unknown tag: apisuccess",
            "line": " src/app/apidocGenerator/temp/apiDoc.js:1"
        },
        {
            "message": "unknown tag: apisuccess",
            "line": " src/app/apidocGenerator/temp/apiDoc.js:1"
        },
        {
            "message": "unknown tag: apisuccessexample",
            "line": " src/app/apidocGenerator/temp/apiDoc.js:1"
        },
        {
            "message": "unknown tag: apierrorexample",
            "line": " src/app/apidocGenerator/temp/apiDoc.js:1"
        },
        {
            "message": "unknown tag: apierror",
            "line": " src/app/apidocGenerator/temp/apiDoc.js:1"
        },
        {
            "message": "unknown tag: api",
            "line": " src/app/apidocGenerator/temp/apiDoc.js:1"
        },
        {
            "message": "unknown tag: apigroup",
            "line": " src/app/apidocGenerator/temp/apiDoc.js:1"
        },
        {
            "message": "unknown tag: apiversion",
            "line": " src/app/apidocGenerator/temp/apiDoc.js:1"
        },
        {
            "message": "unknown tag: apipermission",
            "line": " src/app/apidocGenerator/temp/apiDoc.js:1"
        },
        {
            "message": "unknown tag: apidescription",
            "line": " src/app/apidocGenerator/temp/apiDoc.js:1"
        },
        {
            "message": "unknown tag: apiparam",
            "line": " src/app/apidocGenerator/temp/apiDoc.js:1"
        },
        {
            "message": "unknown tag: apierrorexample",
            "line": " src/app/apidocGenerator/temp/apiDoc.js:1"
        },
        {
            "message": "unknown tag: apierror",
            "line": " src/app/apidocGenerator/temp/apiDoc.js:1"
        },
        {
            "message": "unknown tag: api",
            "line": " src/app/apidocGenerator/temp/apiDoc.js:1"
        },
        {
            "message": "unknown tag: apigroup",
            "line": " src/app/apidocGenerator/temp/apiDoc.js:1"
        },
        {
            "message": "unknown tag: apiversion",
            "line": " src/app/apidocGenerator/temp/apiDoc.js:1"
        },
        {
            "message": "unknown tag: apipermission",
            "line": " src/app/apidocGenerator/temp/apiDoc.js:1"
        },
        {
            "message": "unknown tag: apidescription",
            "line": " src/app/apidocGenerator/temp/apiDoc.js:1"
        },
        {
            "message": "unknown tag: apiparam",
            "line": " src/app/apidocGenerator/temp/apiDoc.js:1"
        },
        {
            "message": "unknown tag: apiparam",
            "line": " src/app/apidocGenerator/temp/apiDoc.js:1"
        },
        {
            "message": "unknown tag: apiparam",
            "line": " src/app/apidocGenerator/temp/apiDoc.js:1"
        },
        {
            "message": "unknown tag: apiparam",
            "line": " src/app/apidocGenerator/temp/apiDoc.js:1"
        },
        {
            "message": "unknown tag: apisuccessexample",
            "line": " src/app/apidocGenerator/temp/apiDoc.js:1"
        },
        {
            "message": "unknown tag: apisuccess",
            "line": " src/app/apidocGenerator/temp/apiDoc.js:1"
        },
        {
            "message": "unknown tag: apierrorexample",
            "line": " src/app/apidocGenerator/temp/apiDoc.js:1"
        },
        {
            "message": "unknown tag: apierror",
            "line": " src/app/apidocGenerator/temp/apiDoc.js:1"
        },
        {
            "message": "unknown tag: api",
            "line": " src/app/apidocGenerator/temp/apiDoc.js:1"
        },
        {
            "message": "unknown tag: apigroup",
            "line": " src/app/apidocGenerator/temp/apiDoc.js:1"
        },
        {
            "message": "unknown tag: apiversion",
            "line": " src/app/apidocGenerator/temp/apiDoc.js:1"
        },
        {
            "message": "unknown tag: apipermission",
            "line": " src/app/apidocGenerator/temp/apiDoc.js:1"
        },
        {
            "message": "unknown tag: apidescription",
            "line": " src/app/apidocGenerator/temp/apiDoc.js:1"
        },
        {
            "message": "unknown tag: apiparam",
            "line": " src/app/apidocGenerator/temp/apiDoc.js:1"
        },
        {
            "message": "unknown tag: apisuccessexample",
            "line": " src/app/apidocGenerator/temp/apiDoc.js:1"
        },
        {
            "message": "unknown tag: apisuccess",
            "line": " src/app/apidocGenerator/temp/apiDoc.js:1"
        },
        {
            "message": "unknown tag: apierrorexample",
            "line": " src/app/apidocGenerator/temp/apiDoc.js:1"
        },
        {
            "message": "unknown tag: apierror",
            "line": " src/app/apidocGenerator/temp/apiDoc.js:1"
        },
        {
            "message": "unknown tag: api",
            "line": " src/app/apidocGenerator/temp/apiDoc.js:1"
        },
        {
            "message": "unknown tag: apigroup",
            "line": " src/app/apidocGenerator/temp/apiDoc.js:1"
        },
        {
            "message": "unknown tag: apiversion",
            "line": " src/app/apidocGenerator/temp/apiDoc.js:1"
        },
        {
            "message": "unknown tag: apipermission",
            "line": " src/app/apidocGenerator/temp/apiDoc.js:1"
        },
        {
            "message": "unknown tag: apidescription",
            "line": " src/app/apidocGenerator/temp/apiDoc.js:1"
        },
        {
            "message": "unknown tag: apiparam",
            "line": " src/app/apidocGenerator/temp/apiDoc.js:1"
        },
        {
            "message": "unknown tag: apiparam",
            "line": " src/app/apidocGenerator/temp/apiDoc.js:1"
        },
        {
            "message": "unknown tag: apiparam",
            "line": " src/app/apidocGenerator/temp/apiDoc.js:1"
        },
        {
            "message": "unknown tag: apiparam",
            "line": " src/app/apidocGenerator/temp/apiDoc.js:1"
        },
        {
            "message": "unknown tag: apiparam",
            "line": " src/app/apidocGenerator/temp/apiDoc.js:1"
        },
        {
            "message": "unknown tag: apisuccessexample",
            "line": " src/app/apidocGenerator/temp/apiDoc.js:1"
        },
        {
            "message": "unknown tag: apisuccess",
            "line": " src/app/apidocGenerator/temp/apiDoc.js:1"
        },
        {
            "message": "unknown tag: apierrorexample",
            "line": " src/app/apidocGenerator/temp/apiDoc.js:1"
        },
        {
            "message": "unknown tag: apierror",
            "line": " src/app/apidocGenerator/temp/apiDoc.js:1"
        },
        {
            "message": "unknown tag: api",
            "line": " src/app/apidocGenerator/temp/apiDoc.js:1"
        },
        {
            "message": "unknown tag: apigroup",
            "line": " src/app/apidocGenerator/temp/apiDoc.js:1"
        },
        {
            "message": "unknown tag: apiversion",
            "line": " src/app/apidocGenerator/temp/apiDoc.js:1"
        },
        {
            "message": "unknown tag: apipermission",
            "line": " src/app/apidocGenerator/temp/apiDoc.js:1"
        },
        {
            "message": "unknown tag: apidescription",
            "line": " src/app/apidocGenerator/temp/apiDoc.js:1"
        },
        {
            "message": "unknown tag: apiparam",
            "line": " src/app/apidocGenerator/temp/apiDoc.js:1"
        },
        {
            "message": "unknown tag: apiparam",
            "line": " src/app/apidocGenerator/temp/apiDoc.js:1"
        },
        {
            "message": "unknown tag: apiparam",
            "line": " src/app/apidocGenerator/temp/apiDoc.js:1"
        },
        {
            "message": "unknown tag: apiparam",
            "line": " src/app/apidocGenerator/temp/apiDoc.js:1"
        },
        {
            "message": "unknown tag: apiparam",
            "line": " src/app/apidocGenerator/temp/apiDoc.js:1"
        },
        {
            "message": "unknown tag: apisuccessexample",
            "line": " src/app/apidocGenerator/temp/apiDoc.js:1"
        },
        {
            "message": "unknown tag: apisuccess",
            "line": " src/app/apidocGenerator/temp/apiDoc.js:1"
        },
        {
            "message": "unknown tag: apierrorexample",
            "line": " src/app/apidocGenerator/temp/apiDoc.js:1"
        },
        {
            "message": "unknown tag: apierror",
            "line": " src/app/apidocGenerator/temp/apiDoc.js:1"
        },
        {
            "message": "unknown tag: date",
            "line": " src/app/apidocGenerator/generator.js:13"
        },
        {
            "message": "unknown tag: copyright",
            "line": " src/app/apidocGenerator/generator.js:13"
        },
        {
            "message": "unknown tag: date",
            "line": " src/app/models/controller.js:12"
        },
        {
            "message": "unknown tag: copyright",
            "line": " src/app/models/controller.js:12"
        },
        {
            "message": "unknown tag: date",
            "line": " src/app/routes/controller.js:30"
        },
        {
            "message": "unknown tag: copyright",
            "line": " src/app/routes/controller.js:30"
        },
        {
            "message": "Missing item type\nstart/stop timer for simple performance check.",
            "line": " apidoc/utils/handlebars_helper.js:7"
        },
        {
            "message": "Missing item type\nReturn localized Text.",
            "line": " apidoc/utils/handlebars_helper.js:21"
        },
        {
            "message": "Missing item type\nConsole log.",
            "line": " apidoc/utils/handlebars_helper.js:29"
        },
        {
            "message": "Missing item type\nReplace underscore with space.",
            "line": " apidoc/utils/handlebars_helper.js:38"
        },
        {
            "message": "Missing item type",
            "line": " apidoc/utils/handlebars_helper.js:46"
        },
        {
            "message": "Missing item type",
            "line": " apidoc/utils/handlebars_helper.js:59"
        },
        {
            "message": "Missing item type",
            "line": " apidoc/utils/handlebars_helper.js:66"
        },
        {
            "message": "Missing item type",
            "line": " apidoc/utils/handlebars_helper.js:81"
        },
        {
            "message": "Missing item type",
            "line": " apidoc/utils/handlebars_helper.js:96"
        },
        {
            "message": "Missing item type",
            "line": " apidoc/utils/handlebars_helper.js:109"
        },
        {
            "message": "Missing item type",
            "line": " apidoc/utils/handlebars_helper.js:116"
        },
        {
            "message": "Missing item type\nConvert Newline to HTML-Break (nl2br).",
            "line": " apidoc/utils/handlebars_helper.js:124"
        },
        {
            "message": "Missing item type",
            "line": " apidoc/utils/handlebars_helper.js:134"
        },
        {
            "message": "Missing item type",
            "line": " apidoc/utils/handlebars_helper.js:159"
        },
        {
            "message": "Missing item type",
            "line": " apidoc/utils/handlebars_helper.js:187"
        },
        {
            "message": "Missing item type",
            "line": " apidoc/utils/handlebars_helper.js:194"
        },
        {
            "message": "Missing item type",
            "line": " apidoc/utils/handlebars_helper.js:201"
        },
        {
            "message": "Missing item type",
            "line": " apidoc/utils/handlebars_helper.js:226"
        },
        {
            "message": "Missing item type\nOverwrite Colors",
            "line": " apidoc/utils/handlebars_helper.js:296"
        },
        {
            "message": "Missing item type\nExports.",
            "line": " apidoc/utils/send_sample_request.js:151"
        },
        {
            "message": "Missing item type\nExpose `pathToRegexp`.",
            "line": " apidoc/vendor/path-to-regexp/index.js:5"
        },
        {
            "message": "Missing item type\nThe main path matching regexp utility.",
            "line": " apidoc/vendor/path-to-regexp/index.js:10"
        },
        {
            "message": "Missing item type\nEscape the capturing group by escaping special characters and meaning.",
            "line": " apidoc/vendor/path-to-regexp/index.js:29"
        },
        {
            "message": "Missing item type\nAttach the keys as a property of the regexp.",
            "line": " apidoc/vendor/path-to-regexp/index.js:39"
        },
        {
            "message": "Missing item type\nGet the flags for a regexp from the options.",
            "line": " apidoc/vendor/path-to-regexp/index.js:51"
        },
        {
            "message": "Missing item type\nPull out keys from a regexp.",
            "line": " apidoc/vendor/path-to-regexp/index.js:61"
        },
        {
            "message": "Missing item type\nTransform an array into a regexp.",
            "line": " apidoc/vendor/path-to-regexp/index.js:86"
        },
        {
            "message": "Missing item type\nReplace the specific tags with regexp strings.",
            "line": " apidoc/vendor/path-to-regexp/index.js:105"
        },
        {
            "message": "Missing item type\nNormalize the given path string, returning a regular expression.\n\nAn empty array can be passed in for the keys, which will hold the\nplaceholder key descriptions. For example, using `/user/:id`, `keys` will\ncontain `[{ name: 'id', delimiter: '/', optional: false, repeat: false }]`.",
            "line": " apidoc/vendor/path-to-regexp/index.js:152"
        },
        {
            "message": "Missing item type",
            "line": " apidoc/vendor/lodash.min.js:1"
        },
        {
            "message": "Missing item type\nstart/stop timer for simple performance check.",
            "line": " apidoc/handlebars_helper.js:7"
        },
        {
            "message": "Missing item type\nReturn localized Text.",
            "line": " apidoc/handlebars_helper.js:21"
        },
        {
            "message": "Missing item type\nConsole log.",
            "line": " apidoc/handlebars_helper.js:29"
        },
        {
            "message": "Missing item type\nReplace underscore with space.",
            "line": " apidoc/handlebars_helper.js:38"
        },
        {
            "message": "Missing item type",
            "line": " apidoc/handlebars_helper.js:46"
        },
        {
            "message": "Missing item type",
            "line": " apidoc/handlebars_helper.js:59"
        },
        {
            "message": "Missing item type",
            "line": " apidoc/handlebars_helper.js:66"
        },
        {
            "message": "Missing item type",
            "line": " apidoc/handlebars_helper.js:81"
        },
        {
            "message": "Missing item type",
            "line": " apidoc/handlebars_helper.js:96"
        },
        {
            "message": "Missing item type",
            "line": " apidoc/handlebars_helper.js:109"
        },
        {
            "message": "Missing item type",
            "line": " apidoc/handlebars_helper.js:116"
        },
        {
            "message": "Missing item type\nConvert Newline to HTML-Break (nl2br).",
            "line": " apidoc/handlebars_helper.js:124"
        },
        {
            "message": "Missing item type",
            "line": " apidoc/handlebars_helper.js:134"
        },
        {
            "message": "Missing item type",
            "line": " apidoc/handlebars_helper.js:159"
        },
        {
            "message": "Missing item type",
            "line": " apidoc/handlebars_helper.js:187"
        },
        {
            "message": "Missing item type",
            "line": " apidoc/handlebars_helper.js:194"
        },
        {
            "message": "Missing item type",
            "line": " apidoc/handlebars_helper.js:201"
        },
        {
            "message": "Missing item type",
            "line": " apidoc/handlebars_helper.js:226"
        },
        {
            "message": "Missing item type\nOverwrite Colors",
            "line": " apidoc/handlebars_helper.js:296"
        },
        {
            "message": "Missing item type\nCheck if Parameter (sub) List has a type Field.\nExample: @apiSuccess          varname1 No type.",
            "line": " apidoc/main.js:340"
        },
        {
            "message": "Missing item type\nOn Template changes, recall plugins.",
            "line": " apidoc/main.js:356"
        },
        {
            "message": "Missing item type\nChange version of an article to compare it to an other version.",
            "line": " apidoc/main.js:460"
        },
        {
            "message": "Missing item type\nCompare all currently selected Versions with their predecessor.",
            "line": " apidoc/main.js:556"
        },
        {
            "message": "Missing item type\nAdd article settings.",
            "line": " apidoc/main.js:577"
        },
        {
            "message": "Missing item type\nRender Article.",
            "line": " apidoc/main.js:605"
        },
        {
            "message": "Missing item type\nRender original Article and remove the current visible Article.",
            "line": " apidoc/main.js:624"
        },
        {
            "message": "Missing item type\nLoad google fonts.",
            "line": " apidoc/main.js:643"
        },
        {
            "message": "Missing item type\nReturn ordered entries by custom order and append not defined entries to the end.",
            "line": " apidoc/main.js:660"
        },
        {
            "message": "Missing item type\nGet model from models.json and format it with mongoose",
            "line": " app/models/controller.js:90"
        },
        {
            "message": "Missing item type\nExport current Controller to use it on node",
            "line": " app/models/controller.js:113"
        },
        {
            "message": "Missing item type\nExport current Controller to use it on node",
            "line": " app/routes/controller.js:442"
        },
        {
            "message": "Missing item type",
            "line": " src/app/apidocGenerator/temp/apiDoc.js:1"
        },
        {
            "message": "Missing item type\nGenerator of comments for apidocjs (www.apidocjs.com)\n\nThis generator will generate a comments file based on an EJS template and lot of model (define in json)\n\nThe comments file once generated will be execute in a apidocjs process for generate an Api Web Documentation\n\nApidocjs will provide also an interface for testing all REST request\n\n\nFor more details on these dependencies read links below :\n- LodAsh : https://lodash.com/\n- yocto-logger : git+ssh://lab.yocto.digital:yocto-node-modules/yocto-utils.git\n- glob : https://www.npmjs.com/package/glob\n- fs : https://nodejs.org/api/fs.html\n- path : https://nodejs.org/api/path.html\n- ejs : https://www.npmjs.com/package/ejs\n- lineByLineReader : https://www.npmjs.com/package/line-by-line",
            "line": " src/app/apidocGenerator/generator.js:13"
        },
        {
            "message": "Missing item type\nGet model from models.json and format it with mongoose",
            "line": " src/app/models/controller.js:89"
        },
        {
            "message": "Missing item type\nExport current Controller to use it on node",
            "line": " src/app/models/controller.js:112"
        },
        {
            "message": "Missing item type\nExport current Controller to use it on node",
            "line": " src/app/routes/controller.js:442"
        },
        {
            "message": "Missing item type\nCreator of message",
            "line": " src/app/defaultMessage.js:1"
        }
    ]
}