{
    "project": {
        "name": "yocto-api",
        "description": "Yocto REST API ",
        "version": "0.1.1",
        "url": "http://www.yocto.re"
    },
    "files": {
        "src/app/models/controller.js": {
            "name": "src/app/models/controller.js",
            "modules": {},
            "classes": {
                "ModelController": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/app/routes/controller.js": {
            "name": "src/app/routes/controller.js",
            "modules": {},
            "classes": {
                "RouteController": 1
            },
            "fors": {},
            "namespaces": {}
        }
    },
    "modules": {},
    "classes": {
        "ModelController": {
            "name": "ModelController",
            "shortname": "ModelController",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/app/models/controller.js",
            "line": 11,
            "description": "Yocto API : Models Controller\n\nController of models, laod models from a json file\n\nAll models are save in an array and are accessible by calling method getModel\n\nFor more details on these dependencies read links below :\n- LodAsh : https://lodash.com/\n- yocto-logger : git+ssh://lab.yocto.digital:yocto-node-modules/yocto-utils.git\n- mongoose : http://mongoosejs.com/\n- glob : https://www.npmjs.com/package/glob\n- fs : https://nodejs.org/api/fs.html\n- path : https://nodejs.org/api/path.html",
            "date": ": 11/05/2015",
            "author": ": Cedric Balard <cedric@yocto.re>",
            "copyright": ": Yocto SAS, All right reserved"
        },
        "RouteController": {
            "name": "RouteController",
            "shortname": "RouteController",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/app/routes/controller.js",
            "line": 53,
            "description": "Yocto API : Routes Controller\n\nController of routes based on Express\n\nIt read a jsonfile and create each routenode\n\nCors Express is enable to permit test with apidocjs\n\nFor more details on these dependencies read links below :\n- LodAsh : https://lodash.com/\n- yocto-logger : git+ssh://lab.yocto.digital:yocto-node-modules/yocto-utils.git\n- express : http://expressjs.com/\n- joi : https://github.com/hapijs/joi",
            "date": ": 11/05/2015",
            "author": ": Cedric Balard <cedric@yocto.re>",
            "copyright": ": Yocto SAS, All right reserved"
        }
    },
    "classitems": [
        {
            "file": "src/app/models/controller.js",
            "line": 33,
            "description": "Array of Object that contains all models found in folder",
            "itemtype": "property",
            "name": "tabModel",
            "type": "Array of Object",
            "default": "empty",
            "class": "ModelController"
        },
        {
            "file": "src/app/models/controller.js",
            "line": 42,
            "description": "Load mongoose controller to execute operation on database",
            "itemtype": "property",
            "name": "mongoose",
            "type": "{Object}",
            "class": "ModelController"
        },
        {
            "file": "src/app/models/controller.js",
            "line": 50,
            "description": "Default yocto-logger",
            "itemtype": "property",
            "name": "logger",
            "type": "{Object}",
            "class": "ModelController"
        },
        {
            "file": "src/app/models/controller.js",
            "line": 59,
            "description": "Add model in @tabModel\nIf model.fn isn't empty, all methods specified will be added in model.methods",
            "itemtype": "method",
            "name": "addModel",
            "params": [
                {
                    "name": "model",
                    "description": "the current model found in json file",
                    "type": "Object"
                },
                {
                    "name": "pathModels",
                    "description": "path of the current model on server",
                    "type": "String"
                }
            ],
            "return": {
                "description": "True if current model was added in tabModel, otherwise false",
                "type": "Boolean"
            },
            "class": "ModelController"
        },
        {
            "file": "src/app/models/controller.js",
            "line": 103,
            "description": "Initialise the Controller</br>\nRetrieve all json file in folder 'pathModels' and load all models",
            "itemtype": "method",
            "name": "init",
            "params": [
                {
                    "name": "pathModels",
                    "description": "Path of the folder that contains all model '.json'",
                    "type": "String"
                }
            ],
            "class": "ModelController"
        },
        {
            "file": "src/app/models/controller.js",
            "line": 132,
            "description": "Get model from tabModel",
            "params": [
                {
                    "name": "nameModel",
                    "description": "the name of model to retrieve",
                    "type": "String"
                }
            ],
            "return": {
                "description": "return false if model not found otherwise return the model",
                "type": "Boolean"
            },
            "class": "ModelController"
        },
        {
            "file": "src/app/models/controller.js",
            "line": 156,
            "description": "Export current Controller to use it on node",
            "class": "ModelController"
        },
        {
            "file": "src/app/routes/controller.js",
            "line": 11,
            "description": "List of all default property in a mongodb document <br>\nThis list define all property that we don't want retrive",
            "itemtype": "property",
            "name": "DEFAULT_PROP_MONGODB",
            "type": "array",
            "default": "[ '__v', '_id']",
            "class": "RouteController"
        },
        {
            "file": "src/app/routes/controller.js",
            "line": 37,
            "description": "Bind of all http methods to request",
            "itemtype": "property",
            "name": "FUNC_TO_BIND",
            "type": "Object",
            "default": "{ patch   : 'addHTTPRequest', put     : 'addHTTPRequest', delete  : 'addHTTPRequest', get     : 'addHTTPRequestGets', head    : 'addHTTPRequestGets', post    : 'post' }",
            "class": "RouteController"
        },
        {
            "file": "src/app/routes/controller.js",
            "line": 74,
            "description": "List of all http request that supported by api",
            "itemtype": "property",
            "name": "ALL_HTTP_REQUESTS",
            "type": "Array of String",
            "default": "[ 'post', 'get', 'put', 'patch', 'delete', 'head']",
            "class": "RouteController"
        },
        {
            "file": "src/app/routes/controller.js",
            "line": 83,
            "description": "Model's Controller, is the controller that will use to retrieve a model",
            "itemtype": "property",
            "name": "models",
            "type": "Object",
            "default": "require '../models/controller.js'",
            "class": "RouteController"
        },
        {
            "file": "src/app/routes/controller.js",
            "line": 92,
            "description": "The main router",
            "itemtype": "property",
            "name": "router",
            "type": "Object",
            "class": "RouteController"
        },
        {
            "file": "src/app/routes/controller.js",
            "line": 100,
            "description": "The main logger",
            "itemtype": "property",
            "name": "logger",
            "type": "Object",
            "class": "RouteController"
        },
        {
            "file": "src/app/routes/controller.js",
            "line": 108,
            "description": "Implement the http request : GET and HEAD</br>\nGet an object </br>\nSend a error to the client if the request failed, or a json file to the client with the data requested if it's an GET requerst </br>\nOR if it's a head request, send a http header",
            "itemtype": "method",
            "name": "addHTTPRequestGets",
            "params": [
                {
                    "name": "model",
                    "description": "the data model object",
                    "type": "Object"
                },
                {
                    "name": "path",
                    "description": "the root path",
                    "type": "String"
                },
                {
                    "name": "paramToGet",
                    "description": "The property to retrieve on url",
                    "type": "String"
                },
                {
                    "name": "reqType",
                    "description": "type of the http req (get or head)",
                    "type": "String"
                }
            ],
            "class": "RouteController"
        },
        {
            "file": "src/app/routes/controller.js",
            "line": 159,
            "description": "Implement the http request : PUT, PATCH and DELETE</br>\nGet an object </br>\nsend a message to the client",
            "itemtype": "method",
            "name": "addHTTPRequest",
            "params": [
                {
                    "name": "model",
                    "description": "the data model object",
                    "type": "Object"
                },
                {
                    "name": "path",
                    "description": "the root path",
                    "type": "String"
                },
                {
                    "name": "paramToGet",
                    "description": "The property to retrieve on url",
                    "type": "String"
                },
                {
                    "name": "reqType",
                    "description": "type of the http req (put, patch or head)",
                    "type": "String"
                }
            ],
            "class": "RouteController"
        },
        {
            "file": "src/app/routes/controller.js",
            "line": 197,
            "description": "Update the model, it's used for : PUT and PATCH\nGet an object </br>\nsend a message to the client",
            "itemtype": "method",
            "name": "updateObject",
            "params": [
                {
                    "name": "model",
                    "description": "the data model object",
                    "type": "Object"
                },
                {
                    "name": "res",
                    "description": "the http response",
                    "type": "Object"
                },
                {
                    "name": "req",
                    "description": "the http request",
                    "type": "Object"
                },
                {
                    "name": "paramToGet",
                    "description": "The property to retrieve on url",
                    "type": "String"
                },
                {
                    "name": "scope",
                    "description": "the scope of pervious function",
                    "type": "Object"
                },
                {
                    "name": "reqType",
                    "description": "the type of the current request",
                    "type": "String"
                }
            ],
            "class": "RouteController"
        },
        {
            "file": "src/app/routes/controller.js",
            "line": 270,
            "description": "Delete one object, it's used for http method : DELETE </br>\nSend a error to the client if the request failed, otherwise a json file to the client with the data",
            "itemtype": "method",
            "name": "deleteObject",
            "params": [
                {
                    "name": "model",
                    "description": "the data model object",
                    "type": "Object"
                },
                {
                    "name": "res",
                    "description": "the http response",
                    "type": "Object"
                },
                {
                    "name": "req",
                    "description": "the http request",
                    "type": "Object"
                },
                {
                    "name": "paramToGet",
                    "description": "The property to retrieve on url to delete the object",
                    "type": "String"
                }
            ],
            "class": "RouteController"
        },
        {
            "file": "src/app/routes/controller.js",
            "line": 301,
            "description": "Save an object in db, it's used for : PUT, PATCH and POST </br>\nSend a error to the client if the request failed, otherwise a json file to the client with the data",
            "itemtype": "method",
            "name": "saveObject",
            "params": [
                {
                    "name": "obj",
                    "description": "the data model object",
                    "type": "Object"
                },
                {
                    "name": "res",
                    "description": "the http response",
                    "type": "Object"
                }
            ],
            "class": "RouteController"
        },
        {
            "file": "src/app/routes/controller.js",
            "line": 330,
            "description": "Implement the http request : POST </br>\nAdd a new Object in DB </br>\nSend a error to the client if the request failed, otherwise a json file to the client with the data",
            "itemtype": "method",
            "name": "post",
            "params": [
                {
                    "name": "Model",
                    "description": "the data model object (Model start with an uppercase for jshint validation)",
                    "type": "Object"
                },
                {
                    "name": "path",
                    "description": "The root path of model",
                    "type": "String"
                }
            ],
            "class": "RouteController"
        },
        {
            "file": "src/app/routes/controller.js",
            "line": 377,
            "description": "Compare data in object with model to check if it's the good type",
            "itemtype": "method",
            "name": "checkTypeValidation",
            "params": [
                {
                    "name": "val",
                    "description": "the mongoose model",
                    "type": "Object"
                },
                {
                    "name": "param",
                    "description": "the param to compare",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "IF success return true, otherwise false",
                "type": "Boolean"
            },
            "class": "RouteController"
        },
        {
            "file": "src/app/routes/controller.js",
            "line": 415,
            "description": "Return the type of param",
            "itemtype": "method",
            "name": "getTypeParam",
            "params": [
                {
                    "name": "param",
                    "description": "the param to get the type",
                    "type": "Object"
                }
            ],
            "class": "RouteController"
        },
        {
            "file": "src/app/routes/controller.js",
            "line": 435,
            "description": "Add a route to the main router",
            "itemtype": "method",
            "name": "addRoute",
            "params": [
                {
                    "name": "pathRequest",
                    "description": "route to add",
                    "type": "String"
                },
                {
                    "name": "nameModel",
                    "description": "name of the model object to retrieve into the controller of model",
                    "type": "String"
                },
                {
                    "name": "reqExcluded",
                    "description": "array of excluded request",
                    "type": "Array"
                },
                {
                    "name": "paramToRetrieve",
                    "description": "name of the param to retrieve",
                    "type": "String"
                },
                {
                    "name": "theRoute",
                    "description": "the current route",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "If success return true, otherwise false",
                "type": "Boolean"
            },
            "class": "RouteController"
        },
        {
            "file": "src/app/routes/controller.js",
            "line": 493,
            "description": "Add a middleware that enables CORS for all routes",
            "itemtype": "method",
            "name": "addMidlleware",
            "class": "RouteController"
        },
        {
            "file": "src/app/routes/controller.js",
            "line": 513,
            "description": "Initialise the controller </br>\nRetrieve all routes and thoose alias and add there into router",
            "itemtype": "method",
            "name": "init",
            "params": [
                {
                    "name": "pathRoutes",
                    "description": "the path of the file route.json",
                    "type": "String"
                },
                {
                    "name": "pathModels",
                    "description": "the path of folder that contains all models.json",
                    "type": "String"
                }
            ],
            "return": {
                "description": "If success return true, otherwise false",
                "type": "Boolean"
            },
            "class": "RouteController"
        },
        {
            "file": "src/app/routes/controller.js",
            "line": 593,
            "description": "Export current Controller to use it on node",
            "class": "RouteController"
        }
    ],
    "warnings": [
        {
            "message": "unknown tag: date",
            "line": " src/app/models/controller.js:11"
        },
        {
            "message": "unknown tag: copyright",
            "line": " src/app/models/controller.js:11"
        },
        {
            "message": "unknown tag: date",
            "line": " src/app/routes/controller.js:53"
        },
        {
            "message": "unknown tag: copyright",
            "line": " src/app/routes/controller.js:53"
        },
        {
            "message": "Missing item type\nGet model from tabModel",
            "line": " src/app/models/controller.js:132"
        },
        {
            "message": "Missing item type\nExport current Controller to use it on node",
            "line": " src/app/models/controller.js:156"
        },
        {
            "message": "Missing item type\nExport current Controller to use it on node",
            "line": " src/app/routes/controller.js:593"
        }
    ]
}