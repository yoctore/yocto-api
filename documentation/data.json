{
    "project": {
        "name": "yocto-api",
        "description": "Yocto REST API",
        "version": "0.1.0",
        "url": ""
    },
    "files": {
        "app/models/controller.js": {
            "name": "app/models/controller.js",
            "modules": {},
            "classes": {
                "ControllerModels": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "app/routes/controller.js": {
            "name": "app/routes/controller.js",
            "modules": {},
            "classes": {
                "ControllerRoutes": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "app/defaultMessage.js": {
            "name": "app/defaultMessage.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        }
    },
    "modules": {},
    "classes": {
        "ControllerModels": {
            "name": "ControllerModels",
            "shortname": "ControllerModels",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "app/models/controller.js",
            "line": 9,
            "description": "Yocto API : Models Controller\n\nController of models, laod models from a json file\n\nAll models are save in an array and are accessible by calling method getModel\n\nFor more details on these dependencies read links below :\n- LodAsh : https://lodash.com/\n- yocto-logger : git+ssh://lab.yocto.digital:yocto-node-modules/yocto-utils.git\n- mongoose : http://mongoosejs.com/",
            "date": ": 11/05/2015",
            "author": ": Cedric Balard <cedric@yocto.re>",
            "copyright": ": Yocto SAS, All right reserved"
        },
        "ControllerRoutes": {
            "name": "ControllerRoutes",
            "shortname": "ControllerRoutes",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "app/routes/controller.js",
            "line": 28,
            "description": "Yocto API : Routes Controller\n\nController of routes based on Express\n\nIt read a jsonfile and create each route\n\nFor more details on these dependencies read links below :\n- LodAsh : https://lodash.com/\n- yocto-logger : git+ssh://lab.yocto.digital:yocto-node-modules/yocto-utils.git\n- express : http://expressjs.com/\n- joi : https://github.com/hapijs/joi#array",
            "date": ": 11/05/2015",
            "author": ": Cedric Balard <cedric@yocto.re>",
            "copyright": ": Yocto SAS, All right reserved"
        }
    },
    "classitems": [
        {
            "file": "app/models/controller.js",
            "line": 29,
            "description": "Array of Object that contains all models",
            "itemtype": "property",
            "name": "tabModel",
            "type": "Array",
            "default": "empty",
            "class": "ControllerModels"
        },
        {
            "file": "app/models/controller.js",
            "line": 38,
            "description": "Create a new model and add it in tabModel",
            "itemtype": "method",
            "name": "addModel",
            "params": [
                {
                    "name": "nameModel",
                    "description": "name of the model",
                    "type": "String"
                },
                {
                    "name": "model",
                    "description": "the model (formated in json)",
                    "type": "Object"
                }
            ],
            "class": "ControllerModels"
        },
        {
            "file": "app/models/controller.js",
            "line": 65,
            "description": "Initialise the Controller</br>\nRead models.json and load all models",
            "itemtype": "method",
            "name": "init",
            "class": "ControllerModels"
        },
        {
            "file": "app/models/controller.js",
            "line": 87,
            "description": "Get model from models.json and format it with mongoose",
            "params": [
                {
                    "name": "nameModel",
                    "description": "the name of model to retrieve",
                    "type": "String"
                }
            ],
            "return": {
                "description": "return the model if founded, or false otherwise",
                "type": "Object"
            },
            "class": "ControllerModels"
        },
        {
            "file": "app/models/controller.js",
            "line": 110,
            "description": "Export current Controller to use it on node",
            "class": "ControllerModels"
        },
        {
            "file": "app/routes/controller.js",
            "line": 11,
            "description": "List of all default property in a mongodb document\nyoct",
            "itemtype": "property",
            "name": "DEFAULT_PROP_MONGODB",
            "type": "Array",
            "default": "[ '__v', '_id']",
            "class": "ControllerRoutes"
        },
        {
            "file": "app/routes/controller.js",
            "line": 49,
            "description": "List of all http request",
            "itemtype": "property",
            "name": "ALL_HTTP_REQUESTS",
            "type": "Array",
            "default": "[ 'post', 'get', 'put', 'patch', 'delete', 'head']",
            "class": "ControllerRoutes"
        },
        {
            "file": "app/routes/controller.js",
            "line": 57,
            "description": "Model's Controller, is the controller that will use to retrieve a model",
            "itemtype": "property",
            "name": "models",
            "type": "Object",
            "default": "require '../models/controller.js'",
            "class": "ControllerRoutes"
        },
        {
            "file": "app/routes/controller.js",
            "line": 65,
            "description": "The main router",
            "itemtype": "property",
            "name": "router",
            "type": "Object",
            "default": "require '../models/controller.js'",
            "class": "ControllerRoutes"
        },
        {
            "file": "app/routes/controller.js",
            "line": 75,
            "description": "Test if string is defined </br>\nUsed to dertermine if we call find() or findById()",
            "itemtype": "method",
            "name": "getFn",
            "params": [
                {
                    "name": "varToTest",
                    "description": "the var to test",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "return 'find' if varToTest is undefined, otherwise 'findById'",
                "type": "String"
            },
            "class": "ControllerRoutes"
        },
        {
            "file": "app/routes/controller.js",
            "line": 91,
            "description": "Implement the http request : GET </br>\nGet an object </br>\nSend a error to the client if the request failed, otherwise a json file to the client with the data requested",
            "itemtype": "method",
            "name": "get",
            "params": [
                {
                    "name": "model",
                    "description": "the data model object",
                    "type": "Object"
                },
                {
                    "name": "path",
                    "description": "the root path",
                    "type": "String"
                },
                {
                    "name": "paramToGet",
                    "description": "The property to retrieve on url",
                    "type": "String"
                }
            ],
            "class": "ControllerRoutes"
        },
        {
            "file": "app/routes/controller.js",
            "line": 124,
            "description": "Implement the http request : HEAD </br>\nGet a head of object </br>\nSend a error to the client if the request failed, otherwise a header will be sent",
            "itemtype": "method",
            "name": "head",
            "params": [
                {
                    "name": "model",
                    "description": "the data model object",
                    "type": "Object"
                },
                {
                    "name": "path",
                    "description": "the root path",
                    "type": "String"
                },
                {
                    "name": "paramToGet",
                    "description": "The property to retrieve on url",
                    "type": "String"
                }
            ],
            "class": "ControllerRoutes"
        },
        {
            "file": "app/routes/controller.js",
            "line": 157,
            "description": "Implement the http request : POST </br>\nAdd a new Object in DB </br>\nSend a error to the client if the request failed, otherwise a json file to the client with the data",
            "itemtype": "method",
            "name": "post",
            "params": [
                {
                    "name": "Model",
                    "description": "the data model object (Model start with an uppercase for jshint validation)",
                    "type": "Object"
                },
                {
                    "name": "path",
                    "description": "the root path",
                    "type": "String"
                }
            ],
            "class": "ControllerRoutes"
        },
        {
            "file": "app/routes/controller.js",
            "line": 201,
            "description": "Implement the http request : PUT </br>\nUpdate an object in integrallity </br>\nSend a error to the client if the request failed, otherwise a json file to the client with the data",
            "itemtype": "method",
            "name": "put",
            "params": [
                {
                    "name": "model",
                    "description": "the data model object",
                    "type": "Object"
                },
                {
                    "name": "path",
                    "description": "the root path",
                    "type": "String"
                },
                {
                    "name": "paramToGet",
                    "description": "The property to retrieve on url to update the object",
                    "type": "String"
                }
            ],
            "class": "ControllerRoutes"
        },
        {
            "file": "app/routes/controller.js",
            "line": 255,
            "description": "Check if the parameter should not be empty </br>\nAnd if it's the case, add a validation step into mongoose",
            "itemtype": "method",
            "name": "checkModelValidation",
            "params": [
                {
                    "name": "val",
                    "description": "the value",
                    "type": "Object"
                },
                {
                    "name": "value",
                    "description": "the object",
                    "type": "Object"
                },
                {
                    "name": "key",
                    "description": "the key of the value",
                    "type": "String"
                }
            ],
            "class": "ControllerRoutes"
        },
        {
            "file": "app/routes/controller.js",
            "line": 283,
            "description": "Implement the http request : PATCH </br>\nUpdate an object partialy </br>\nSend a error to the client if the request failed, otherwise a json file to the client with the data",
            "itemtype": "method",
            "name": "patch",
            "params": [
                {
                    "name": "model",
                    "description": "the data model object",
                    "type": "Object"
                },
                {
                    "name": "path",
                    "description": "the root path",
                    "type": "String"
                },
                {
                    "name": "paramToGet",
                    "description": "The property to retrieve on url to update the object",
                    "type": "String"
                }
            ],
            "class": "ControllerRoutes"
        },
        {
            "file": "app/routes/controller.js",
            "line": 330,
            "description": "Implement the http request : DELETE </br>\nDelete an object </br>\nSend a error to the client if the request failed, otherwise a json file to the client with the data",
            "itemtype": "method",
            "name": "delete",
            "params": [
                {
                    "name": "model",
                    "description": "the data model object",
                    "type": "Object"
                },
                {
                    "name": "path",
                    "description": "the root path",
                    "type": "String"
                },
                {
                    "name": "paramToGet",
                    "description": "The property to retrieve on url to delete the object",
                    "type": "String"
                }
            ],
            "class": "ControllerRoutes"
        },
        {
            "file": "app/routes/controller.js",
            "line": 362,
            "description": "Add a route to the main router",
            "itemtype": "method",
            "name": "addRoute",
            "params": [
                {
                    "name": "path",
                    "description": "route to add",
                    "type": "String"
                },
                {
                    "name": "nameModel",
                    "description": "name of the model object to retrieve into the controller of model",
                    "type": "String"
                },
                {
                    "name": "reqExcluded",
                    "description": "array of excluded request",
                    "type": "Array"
                },
                {
                    "name": "paramToRetrieve",
                    "description": "name of the param to retrieve",
                    "type": "String"
                }
            ],
            "class": "ControllerRoutes"
        },
        {
            "file": "app/routes/controller.js",
            "line": 397,
            "description": "Add a middleware",
            "itemtype": "method",
            "name": "addMidlleware",
            "class": "ControllerRoutes"
        },
        {
            "file": "app/routes/controller.js",
            "line": 410,
            "description": "Initialise the controller </br>\nRetrieve all routes and thoose alias and add there into router",
            "itemtype": "method",
            "name": "init",
            "class": "ControllerRoutes"
        },
        {
            "file": "app/routes/controller.js",
            "line": 460,
            "description": "Export current Controller to use it on node",
            "class": "ControllerRoutes"
        },
        {
            "file": "app/defaultMessage.js",
            "line": 1,
            "description": "Creator of message",
            "class": ""
        }
    ],
    "warnings": [
        {
            "message": "unknown tag: date",
            "line": " app/models/controller.js:9"
        },
        {
            "message": "unknown tag: copyright",
            "line": " app/models/controller.js:9"
        },
        {
            "message": "unknown tag: date",
            "line": " app/routes/controller.js:28"
        },
        {
            "message": "unknown tag: copyright",
            "line": " app/routes/controller.js:28"
        },
        {
            "message": "Missing item type\nGet model from models.json and format it with mongoose",
            "line": " app/models/controller.js:87"
        },
        {
            "message": "Missing item type\nExport current Controller to use it on node",
            "line": " app/models/controller.js:110"
        },
        {
            "message": "Missing item type\nExport current Controller to use it on node",
            "line": " app/routes/controller.js:460"
        },
        {
            "message": "Missing item type\nCreator of message",
            "line": " app/defaultMessage.js:1"
        }
    ]
}