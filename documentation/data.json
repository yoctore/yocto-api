{
    "project": {
        "name": "yocto-api",
        "description": "Yocto REST API ",
        "version": "0.1.1",
        "url": "http://www.yocto.re"
    },
    "files": {
        "src/app/models/controller.js": {
            "name": "src/app/models/controller.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/app/routes/controller.js": {
            "name": "src/app/routes/controller.js",
            "modules": {},
            "classes": {
                "": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "test/web/httpRequest.js": {
            "name": "test/web/httpRequest.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "test/routesController.js": {
            "name": "test/routesController.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        }
    },
    "modules": {},
    "classes": {
        "": {
            "file": "src/app/routes/controller.js",
            "line": 28,
            "description": "Yocto API : Routes Controller\n\nController of routes based on Express\n\nIt read a jsonfile and create each route\n\nCors Express is enable to permit test with apidocjs\n\nFor more details on these dependencies read links below :\n- LodAsh : https://lodash.com/\n- yocto-logger : git+ssh://lab.yocto.digital:yocto-node-modules/yocto-utils.git\n- express : http://expressjs.com/\n- joi : https://github.com/hapijs/joi#array",
            "date": ": 11/05/2015",
            "author": ": Cedric Balard <cedric@yocto.re>",
            "copyright": ": Yocto SAS, All right reserved"
        }
    },
    "classitems": [
        {
            "file": "src/app/models/controller.js",
            "line": 61,
            "description": "Array of Object that contains all models",
            "itemtype": "property",
            "name": "tabModel",
            "type": "Array",
            "default": "empty",
            "class": ""
        },
        {
            "file": "src/app/models/controller.js",
            "line": 121,
            "description": "Initialise the Controller</br>\nRetrieve all json file in folder 'pathModels' and load all models",
            "itemtype": "method",
            "name": "init",
            "params": [
                {
                    "name": "pathModels",
                    "description": "Path of folders that contains all jsonFile",
                    "type": "String"
                }
            ],
            "class": ""
        },
        {
            "file": "src/app/models/controller.js",
            "line": 150,
            "description": "Get model from models.json and format it with mongoose",
            "params": [
                {
                    "name": "nameModel",
                    "description": "the name of model to retrieve",
                    "type": "String"
                }
            ],
            "return": {
                "description": "{Boolean} return the model if founded, or false otherwise",
                "type": "Object"
            },
            "class": ""
        },
        {
            "file": "src/app/models/controller.js",
            "line": 174,
            "description": "Export current Controller to use it on node",
            "class": ""
        },
        {
            "file": "src/app/routes/controller.js",
            "line": 11,
            "description": "List of all default property in a mongodb document\nyoct",
            "itemtype": "property",
            "name": "DEFAULT_PROP_MONGODB",
            "type": "Array",
            "default": "[ '__v', '_id']",
            "class": ""
        },
        {
            "file": "src/app/routes/controller.js",
            "line": 50,
            "description": "List of all http request",
            "itemtype": "property",
            "name": "ALL_HTTP_REQUESTS",
            "type": "Array",
            "default": "[ 'post', 'get', 'put', 'patch', 'delete', 'head']",
            "class": ""
        },
        {
            "file": "src/app/routes/controller.js",
            "line": 58,
            "description": "Model's Controller, is the controller that will use to retrieve a model",
            "itemtype": "property",
            "name": "models",
            "type": "Object",
            "default": "require '../models/controller.js'",
            "class": ""
        },
        {
            "file": "src/app/routes/controller.js",
            "line": 66,
            "description": "The main router",
            "itemtype": "property",
            "name": "router",
            "type": "Object",
            "default": "require '../models/controller.js'",
            "class": ""
        },
        {
            "file": "src/app/routes/controller.js",
            "line": 74,
            "description": "The main logger",
            "itemtype": "property",
            "name": "logger",
            "type": "Object",
            "class": ""
        },
        {
            "file": "src/app/routes/controller.js",
            "line": 81,
            "description": "Test if string is defined </br>\nUsed to dertermine if we call find() or findById()",
            "itemtype": "method",
            "name": "getFn",
            "params": [
                {
                    "name": "varToTest",
                    "description": "the var to test",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "return 'find' if varToTest is undefined, otherwise 'findById'",
                "type": "String"
            },
            "class": ""
        },
        {
            "file": "src/app/routes/controller.js",
            "line": 97,
            "description": "Implement the http request : GET and HEAD</br>\nGet an object </br>\nSend a error to the client if the request failed, or a json file to the client with the data requested if it's an GET requerst </br>\nOR if it's a head request, send a http header",
            "itemtype": "method",
            "name": "get",
            "params": [
                {
                    "name": "model",
                    "description": "the data model object",
                    "type": "Object"
                },
                {
                    "name": "path",
                    "description": "the root path",
                    "type": "String"
                },
                {
                    "name": "paramToGet",
                    "description": "The property to retrieve on url",
                    "type": "String"
                },
                {
                    "name": "reqType",
                    "description": "type of the http req (get or head)",
                    "type": "String"
                }
            ],
            "class": ""
        },
        {
            "file": "src/app/routes/controller.js",
            "line": 153,
            "description": "Implement the http request : PUT, PATCH and DELETE</br>\nGet an object </br>\nsend a message to the client",
            "itemtype": "method",
            "name": "get",
            "params": [
                {
                    "name": "model",
                    "description": "the data model object",
                    "type": "Object"
                },
                {
                    "name": "path",
                    "description": "the root path",
                    "type": "String"
                },
                {
                    "name": "paramToGet",
                    "description": "The property to retrieve on url",
                    "type": "String"
                },
                {
                    "name": "reqType",
                    "description": "type of the http req (put, patch or head)",
                    "type": "String"
                }
            ],
            "class": ""
        },
        {
            "file": "src/app/routes/controller.js",
            "line": 190,
            "description": "Update the model, it's used for : PUT and PATCH\nGet an object </br>\nsend a message to the client",
            "itemtype": "method",
            "name": "get",
            "params": [
                {
                    "name": "model",
                    "description": "the data model object",
                    "type": "Object"
                },
                {
                    "name": "res",
                    "description": "the http response",
                    "type": "Object"
                },
                {
                    "name": "req",
                    "description": "the http request",
                    "type": "Object"
                },
                {
                    "name": "paramToGet",
                    "description": "The property to retrieve on url",
                    "type": "String"
                }
            ],
            "class": ""
        },
        {
            "file": "src/app/routes/controller.js",
            "line": 261,
            "description": "delete the model, it's used for : DELETE </br>\nDelete an object </br>\nSend a error to the client if the request failed, otherwise a json file to the client with the data",
            "itemtype": "method",
            "name": "delete",
            "params": [
                {
                    "name": "model",
                    "description": "the data model object",
                    "type": "Object"
                },
                {
                    "name": "res",
                    "description": "the http response",
                    "type": "Object"
                },
                {
                    "name": "req",
                    "description": "the http request",
                    "type": "Object"
                },
                {
                    "name": "paramToGet",
                    "description": "The property to retrieve on url to delete the object",
                    "type": "String"
                }
            ],
            "class": ""
        },
        {
            "file": "src/app/routes/controller.js",
            "line": 295,
            "description": "Save an object in db, it's used for : PUT, PATCH and POST </br>\nSend a error to the client if the request failed, otherwise a json file to the client with the data",
            "itemtype": "method",
            "name": "saveObject",
            "params": [
                {
                    "name": "obj",
                    "description": "the data model object",
                    "type": "Object"
                },
                {
                    "name": "res",
                    "description": "the http response",
                    "type": "Object"
                }
            ],
            "class": ""
        },
        {
            "file": "src/app/routes/controller.js",
            "line": 326,
            "description": "Implement the http request : POST </br>\nAdd a new Object in DB </br>\nSend a error to the client if the request failed, otherwise a json file to the client with the data",
            "itemtype": "method",
            "name": "post",
            "params": [
                {
                    "name": "Model",
                    "description": "the data model object (Model start with an uppercase for jshint validation)",
                    "type": "Object"
                },
                {
                    "name": "path",
                    "description": "the root path",
                    "type": "String"
                }
            ],
            "class": ""
        },
        {
            "file": "src/app/routes/controller.js",
            "line": 374,
            "description": "Compare data in object with model to check if it's the good type",
            "itemtype": "method",
            "name": "checkTypeValidation",
            "params": [
                {
                    "name": "val",
                    "description": "the mongoose model",
                    "type": "Object"
                },
                {
                    "name": "param",
                    "description": "the param to compare",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "to success",
                "type": "Boolean"
            },
            "class": ""
        },
        {
            "file": "src/app/routes/controller.js",
            "line": 408,
            "itemtype": "method",
            "name": "getTypeParam",
            "params": [
                {
                    "name": "param",
                    "description": "the param to get the type",
                    "type": "Object"
                }
            ],
            "class": ""
        },
        {
            "file": "src/app/routes/controller.js",
            "line": 443,
            "description": "Add a route to the main router",
            "itemtype": "method",
            "name": "addRoute",
            "params": [
                {
                    "name": "path",
                    "description": "route to add",
                    "type": "String"
                },
                {
                    "name": "nameModel",
                    "description": "name of the model object to retrieve into the controller of model",
                    "type": "String"
                },
                {
                    "name": "reqExcluded",
                    "description": "array of excluded request",
                    "type": "Array"
                },
                {
                    "name": "paramToRetrieve",
                    "description": "name of the param to retrieve",
                    "type": "String"
                }
            ],
            "class": ""
        },
        {
            "file": "src/app/routes/controller.js",
            "line": 488,
            "description": "Add a middleware",
            "itemtype": "method",
            "name": "addMidlleware",
            "class": ""
        },
        {
            "file": "src/app/routes/controller.js",
            "line": 517,
            "description": "Initialise the controller </br>\nRetrieve all routes and thoose alias and add there into router",
            "itemtype": "method",
            "name": "init",
            "class": ""
        },
        {
            "file": "src/app/routes/controller.js",
            "line": 588,
            "description": "Export current Controller to use it on node",
            "class": ""
        },
        {
            "file": "test/web/httpRequest.js",
            "line": 1,
            "description": "Unit tests",
            "class": ""
        },
        {
            "file": "test/routesController.js",
            "line": 1,
            "description": "Unit tests",
            "class": ""
        }
    ],
    "warnings": [
        {
            "message": "unknown tag: date",
            "line": " src/app/models/controller.js:42"
        },
        {
            "message": "unknown tag: copyright",
            "line": " src/app/models/controller.js:42"
        },
        {
            "message": "unknown tag: date",
            "line": " src/app/routes/controller.js:28"
        },
        {
            "message": "unknown tag: copyright",
            "line": " src/app/routes/controller.js:28"
        },
        {
            "message": "Missing item type\nGet model from models.json and format it with mongoose",
            "line": " src/app/models/controller.js:150"
        },
        {
            "message": "Missing item type\nExport current Controller to use it on node",
            "line": " src/app/models/controller.js:174"
        },
        {
            "message": "Missing item type\nExport current Controller to use it on node",
            "line": " src/app/routes/controller.js:588"
        },
        {
            "message": "Missing item type\nUnit tests",
            "line": " test/web/httpRequest.js:1"
        },
        {
            "message": "Missing item type\nUnit tests",
            "line": " test/routesController.js:1"
        }
    ]
}