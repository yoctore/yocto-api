"use strict";function RouteController(a){this.ALL_HTTP_REQUESTS=["post","get","put","patch","delete","head"],this.models={},this.app={},this.config={},this.logger=a||logger,this.endPoints={}}var joi=require("joi"),_=require("lodash"),logger=require("yocto-logger"),fs=require("fs"),path=require("path"),utils=require("yocto-utils"),routeJoiSchema=joi.object().keys({path:joi.string().required().empty().trim(),alias:joi.array().items(joi.string().empty().trim()),model:joi.string().required().empty().trim(),excluded:joi.array().items(joi.string().valid("post","get","put","patch","delete","head")),methods:joi.array().min(0).items(joi.object().keys({method:joi.string().required().allow("post","get","put","patch","delete","head"),path:joi.string().required().empty("")["default"](""),fn:joi.string().required().empty(),notify:joi.object().optional().keys({sms:joi.object().optional().keys({references:joi.array().optional().items(joi.string().empty())["default"]([]),enable:joi["boolean"]().optional()["default"](!1)})["default"]({mail:{references:[],enable:!1}}),mail:joi.object().optional().keys({references:joi.array().optional().items(joi.string().empty())["default"]([]),enable:joi["boolean"]().optional()["default"](!1)})["default"]({mail:{references:[],enable:!1}})})["default"]({sms:{references:[],enable:!1},mail:{references:[],enable:!1}})}))});RouteController.prototype.addRoute=function(a,b,c,d,e,f){var g={};this.logger.debug("[ ControllerRoutes.addRoute ] - new route found, path : "+a);var h=[],i=function(a,b,c,d){if(!_.isUndefined(a.params.id)){if(_.indexOf(d,a.params.id)>=0)return c();if(!a.params.id.match(/^[0-9a-fA-F]{24}$/))return b.status(200).jsonp({status:"error",code:"400000",message:"You have an error in your request, an Id should be compose by 24 digit and/or characters",data:{}})}return!0};g.get=function(a,b,c){this.app.get(b,function(b,d,e){var f=i(b,d,e,h);if(!f)return f;var g="find",j={};_.isUndefined(b.params[c])||(g="findById",j=b.params[c]),a[g](j,"-__v").then(function(a){d.status(200).jsonp({status:"success",code:"200000",message:"Document(s) are found",data:_.isEmpty(a)?[]:a})})["catch"](function(a){d.status(200).jsonp({status:"error",code:"400000",message:"An error occured when retrieving document",data:{}}),this.logger.error("[ ControllerRoutes.get ] - error : "+a)}.bind(this))})}.bind(this),g.head=function(a,b,c,d){g.get(a,b,c,d)},g["delete"]=function(a,b){this.app["delete"](b,function(b,c,d){var e=i(b,c,d,h);if(!e)return e;var f="deleted_date";if(!_.isUndefined(a.schema.paths[f])&&!_.isUndefined(b.params.id)){var g=utils.obj.underscoreKeys({updatedDate:Date.now(),deletedDate:Date.now()});return a.update(b.params.id,g).then(function(a){return _.isEmpty(a)?(this.logger.error("[ ControllerRoutes.delete ] - the document with id : "+b.params.id+" wasn't deleted because this id doesn't correspond to an existant document"),c.status(200).jsonp({status:"error",code:"400000",message:"An error occured, the document was not deleted because this id doesn't correspond to an existant document",data:{}})):(c.status(200).jsonp({status:"success",code:"200000",message:"The document(s) was deleted",data:{}}),void this.logger.info("[ ControllerRoutes.delete ] - the document with id : "+b.params.id+" was deleted"))}.bind(this))["catch"](function(a){c.status(200).jsonp({status:"error",code:"400000",message:"An error occured, the document was not deleted",data:{}}),this.logger.error("[ ControllerRoutes.delete ] - error : "+a)}.bind(this))}c.status(200).jsonp({status:"error",code:"400000",message:"The document was not deleted because id wasn'tspecified, or the field deleted_date doesn't exist in schema",data:{}}),this.logger.error("[ ControllerRoutes.delete ] - The document was not deleted because id wasn'tspecified, or the field deleted_date doesn't exist in schema")}.bind(this))}.bind(this),g.patch=function(a,b,c){this.app.patch(b,function(b,d,e){var f=i(b,d,e,h);if(!f)return f;var g=b.body;if(!_.isUndefined(b.params.id)){var j="updated_date";return _.isUndefined(a.schema.paths[j])||(g=_.merge(g,utils.obj.underscoreKeys({updatedDate:Date.now()}))),a.update(b.params[c],g,"patch").then(function(a){return _.isEmpty(a)?(this.logger.error("[ ControllerRoutes.patch ] - the document with id : "+b.params.id+" wasn't updated because this id doesn't correspond to an existing document"),d.status(200).jsonp({status:"error",code:"400000",message:"An error occured, the document was not updated because this id doesn't correspond to an existing document",data:{}})):void d.status(200).jsonp({status:"success",code:"200000",message:"The document(s) was updated",data:{}})}.bind(this))["catch"](function(a){d.status(200).jsonp({status:"error",code:"400000",message:"An error occured, the document was not updated",data:{}}),this.logger.error("[ ControllerRoutes.patch ] - error : "+a)}.bind(this))}d.status(200).jsonp({status:"error",code:"400000",message:"The document wasn't updated because id wasn't specified in params.",data:{}}),this.logger.error("[ ControllerRoutes.patch ] - The document was not updated because id wasn't specified")}.bind(this))}.bind(this),g.put=function(a,b,c){this.app.put(b,function(b,d,e){var f=i(b,d,e,h);return f?void a.update(b.params[c],b.body,"put").then(function(){d.status(200).jsonp({status:"success",code:"200000",message:"The document(s) was updated",data:{}})})["catch"](function(a){d.status(200).jsonp({status:"error",code:"400000",message:"An error occured, the document was not updated",data:{}}),this.logger.error("[ ControllerRoutes.put ] - error : "+a)}.bind(this)):f}.bind(this))}.bind(this),g.post=function(a,b){this.app.post(b,function(b,c,d){var e=i(b,c,d,h);return e?void a.create(b.body).then(function(a){c.status(200).jsonp({status:"success",code:"200000",message:"The document(s) was created",data:a})})["catch"](function(a){c.status(200).jsonp({status:"error",code:"400000",message:"An error occured, the document was not created, please check your request",data:{}}),this.logger.error("[ ControllerRoutes.post ] - error : "+a)}.bind(this)):e}.bind(this))}.bind(this);var j=this.models.db.getModel(b);return j?(logger.debug("[ ControllerRoutes.addRoute ] - adding new route, path : "+a),_.each(e.methods,function(a){var c=a.path.split("/");h.push(_.first(c));try{var d=path.normalize(e.path+"/"+a.path),g=require(path.normalize(f+b.toLowerCase()+".js"));if(_.isUndefined(g[a.fn]))throw" Function '"+a.fn+"' not found";this.app[a.method](d,function(b,c,d){g[a.fn].apply({model:j,app:this.app,config:this.config,logger:this.logger,end:this.endPoints,notify:a.notify},[b,c,d])}.bind(this))}catch(i){this.logger.error("[ ControllerRoutes.addRoute ] - can't add specifiq route : '"+a.sync+"' for model : '"+b+"', more details : "+i.toString())}},this),_.each(_.difference(this.ALL_HTTP_REQUESTS,c),function(b){g[b](j,a,"id",b)}),!0):(this.logger.error("[ ControllerRoutes.addRoute ] - can't add route : '"+a+"' ,because model is not defined"),!1)},RouteController.prototype.init=function(a,b,c,d,e){this.logger.debug("[ ControllerRoutes.init ] - initialising api start"),this.app=a.app.app,this.config=a.config.config,this.app.use(this.middlewareApi.bind(this)),this.models=c;var f={};if(!_.isString(b)||!_.isString(d)||_.isEmpty(b)||_.isEmpty(d)||_.isEmpty(e)||_.isEmpty(e))return!1;try{fs.accessSync(b),f=JSON.parse(fs.readFileSync(b,"utf-8")),this.endPoints=require(e)}catch(g){return this.logger.error("[ ControllerRoutes.init ] - error during loading files, more details : "+g),!1}return _.each(f.routes,function(a){var b=routeJoiSchema.validate(a);if(_.isEmpty(b)||_.isEmpty(b.error)){a=b.value;var c=[];c.push(a.path),_.isEmpty(a.alias)||(c.push(a.alias),c=_.flatten(c)),_.each(c,function(b){b+="/:id?",this.addRoute(b,a.model,a.excluded,a.param,a,d,a.optionalParam)},this)}else logger.error("[ ControllerRoutes.init ] - Joi Validation failed ; error when trying to add a new route, please check the file : 'routes.json'"),_.each(b.error.details,function(a){this.logger.warning("[ ControllerRoutes.init ] - "+a.message+" at "+a.path)},this)},this),!0},RouteController.prototype.middlewareApi=function(a,b,c){this.logger.info("[ api.middlewareApi ] - incoming request : [ "+a.method+" ] on url "+a.url+(_.isEmpty(a.body)?"":" -  body is : \n"+utils.obj.inspect(a.body))),_.isUndefined(a.headers["x-client-type"])||"apidocjs"!==a.headers["x-client-type"]||_.isUndefined(a.body.data)||_.isEmpty(a.body.data)||(a.body.data=JSON.parse(a.body.data)),c()},module.exports=new RouteController;