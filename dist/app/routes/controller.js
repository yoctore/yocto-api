"use strict";function RouteController(){this.ALL_HTTP_REQUESTS=["post","get","put","patch","delete","head"],this.models=models,this.router=express(),this.logger=logger}var joi=require("joi"),_=require("lodash"),logger=require("yocto-logger"),express=require("express"),models=require("../models/controller.js"),fs=require("fs"),path=require("path"),routeJoiSchema=joi.object().keys({path:joi.string().required().min(1).trim(),alias:joi.array().items(joi.string().min(1).trim()),model:joi.string().required().min(1).trim(),paramToRetrieve:joi.array().items(joi.string().min(1).trim().allow("post","get","put","patch","delete","head")),excluded:joi.array().items(joi.string().min(1).trim()),methods:joi.array().items(joi.object().keys({method:joi.string().required().allow("post","get","put","patch","delete","head"),path:joi.string().required().min(1),fn:joi.string().required().min(1)}))});RouteController.prototype.addRoute=function(a,b,c,d,e){var f=this,g={};logger.debug("[ ControllerRoutes.addRoute ] - new route found, path : "+a),g.get=function(a,b,c){f.router.get(b,function(d,e){logger.debug("[ ControllerRoutes.get ] - revceiving request, route is : "+b),a.schema.methods.crud.get(d.params[c]).then(function(a){e.status(200).jsonp({status:"success",code:"200000",message:"Default GET method",data:_.isEmpty(a)?[]:a})})["catch"](function(a){e.status(400).jsonp({status:"error",code:"400000",message:"Default GET method, error geting object",data:a})})})},g.head=function(a,b,c,d){g.get(a,b,c,d)},g["delete"]=function(a,b,c){f.router["delete"](b,function(d,e){logger.debug("[ ControllerRoutes.delete ] - revceiving request, route is : "+b),a.schema.methods.crud["delete"](d.params[c]).then(function(a){e.status(200).jsonp({status:"success",code:"200000",message:"Default DELETE method",data:a+" document(s) was deleted"})})["catch"](function(a){e.status(400).jsonp({status:"error",code:"400000",message:"Default DELETE method, error delete object",data:a})})})},g.patch=function(a,b,c){f.router.patch(b,function(d,e){logger.debug("[ ControllerRoutes.patch ] - revceiving request, route is : "+b),a.schema.methods.crud.update(d.params[c],d.body,"patch").then(function(a){e.status(200).jsonp({status:"success",code:"200000",message:"Default PATCH method",data:a+" document(s) was modified"})})["catch"](function(a){e.status(400).jsonp({status:"error",code:"400000",message:"Default PATCH method, error modifing object",data:a})})})},g.put=function(a,b,c){f.router.put(b,function(d,e){logger.debug("[ ControllerRoutes.put ] - revceiving request, route is : "+b),a.schema.methods.crud.update(d.params[c],d.body,"put").then(function(a){e.status(200).jsonp({status:"success",code:"200000",message:"Default PUT method",data:a+" document(s) was modified"})})["catch"](function(a){e.status(400).jsonp({status:"error",code:"400000",message:"Default PUT method, error modifing object",data:a})})})},g.post=function(a,b){f.router.post(b,function(c,d){logger.debug("[ ControllerRoutes.post ] - revceiving request, route is : "+b),a.schema.methods.crud.create(c.body).then(function(a){d.status(200).jsonp({status:"success",code:"200000",message:"Default POST method, object created in data",data:a})})["catch"](function(a){d.status(400).jsonp({status:"error",code:"400000",message:"Default POST method, error creating object",data:a})})})};var h=f.models.getModel(b);return h?(logger.debug("[ ControllerRoutes.addRoute ] - adding new route, path : "+a),_.each(_.difference(f.ALL_HTTP_REQUESTS,c),function(b){g[b](h,a,d,b)},this),_.each(e.methods,function(b){try{var c=path.normalize(a+"/"+b.path);if(_.isUndefined(h.schema.methods[b.fn]))throw" Function '"+b.fn+"' not found";f.router[b.method](c,function(a,c,d){h.schema.methods[b.fn](a,c,d,h,models)})}catch(d){logger.error("[ ControllerRoutes.addRoute ] - can't add specifiq route : '"+b.sync+"' , more details : "+d)}}),!0):(logger.error("[ ControllerRoutes.addRoute ] - can't add route : '"+a+"' ,because model is not defined"),!1)},RouteController.prototype.init=function(a,b){var c=this;logger.debug("[ ControllerRoutes.init ] - start");var d=function(){c.router.use(function(a,b,c){b.header("Access-Control-Allow-Origin","*"),b.header("Access-Control-Allow-Headers","Origin, X-Requested-With, Content-Type, Accept"),b.header("Access-Control-Allow-Methods","GET, POST, PUT, DELETE, PATCH, OPTIONS"),c()})},e={};if(!_.isString(a)||!_.isString(b)||_.isEmpty(a)||_.isEmpty(b))return!1;try{fs.accessSync(a),fs.accessSync(b),e=JSON.parse(fs.readFileSync(a,"utf-8"))}catch(f){return logger.error("[ ControllerRoutes.init ] - error during loading files, more details : "+f),!1}return this.models.init(b),d(),_.each(e.routes,function(a){var b=routeJoiSchema.validate(a);if(_.isEmpty(b)||_.isEmpty(b.error)){var c=[];c.push(a.path),_.isEmpty(a.alias)||(c.push(a.alias),c=_.flatten(c)),_.each(c,function(b){this.addRoute(b,a.model,a.excluded,a.param,a)},this)}else logger.error("[ ControllerRoutes.init ] - Joi Validation failed ; error when trying to add a new route, please check the file : 'routes.json'"),_.each(b.error.details,function(a){logger.warning("[ ControllerRoutes.init ] - "+a.message+" at "+a.path)})},this),!0},module.exports=new RouteController;