"use strict";function RouteController(){this.ALL_HTTP_REQUESTS=["post","get","put","patch","delete","head"],this.models={},this.router=express(),this.logger=logger}var joi=require("joi"),_=require("lodash"),logger=require("yocto-logger"),express=require("express"),fs=require("fs"),path=require("path"),routeJoiSchema=joi.object().keys({path:joi.string().required().min(1).trim(),alias:joi.array().items(joi.string().min(1).trim()),model:joi.string().required().min(1).trim(),param:joi.array().items(joi.string().min(1).trim().allow("post","get","put","patch","delete","head")),excluded:joi.array().items(joi.string().min(1).trim()),methods:joi.array().items(joi.object().keys({method:joi.string().required().allow("post","get","put","patch","delete","head"),path:joi.string().required().min(1),fn:joi.string().required().min(1)}))});RouteController.prototype.addRoute=function(a,b,c,d,e,f){var g=this,h={};logger.debug("[ ControllerRoutes.addRoute ] - new route found, path : "+a),h.get=function(a,b,c){g.router.get(b,function(d,e){logger.debug("[ ControllerRoutes.get ] - revceiving request, route is : "+b),a.read(d.params[c]).then(function(a){e.status(200).jsonp({status:"success",code:"200000",message:"Document(s) are found",data:_.isEmpty(a)?[]:a})})["catch"](function(a){e.status(400).jsonp({status:"error",code:"400000",message:"An error occured when retrieving document",data:{}}),logger.error("[ ControllerRoutes.patch ] - error : "+a)})})},h.head=function(a,b,c,d){h.get(a,b,c,d)},h["delete"]=function(a,b,c){g.router["delete"](b,function(d,e){logger.debug("[ ControllerRoutes.delete ] - revceiving request, route is : "+b),a["delete"](d.params[c]).then(function(a){e.status(200).jsonp({status:"success",code:"200000",message:"The document(s) was deleted",data:{}})})["catch"](function(a){e.status(400).jsonp({status:"error",code:"400000",message:"An error occured, the document was not deleted",data:{}}),logger.error("[ ControllerRoutes.delete ] - error : "+a)})})},h.patch=function(a,b,c){g.router.patch(b,function(d,e){logger.debug("[ ControllerRoutes.patch ] - revceiving request, route is : "+b),a.update(d.params[c],d.body,"patch").then(function(a){e.status(200).jsonp({status:"success",code:"200000",message:"The document(s) was patched",data:{}})})["catch"](function(a){e.status(400).jsonp({status:"error",code:"400000",message:"An error occured, the document was not updated",data:{}}),logger.error("[ ControllerRoutes.patch ] - error : "+a)})})},h.put=function(a,b,c){g.router.put(b,function(d,e){logger.debug("[ ControllerRoutes.put ] - revceiving request, route is : "+b),a.update(d.params[c],d.body,"put").then(function(a){e.status(200).jsonp({status:"success",code:"200000",message:"The document(s) was updated",data:{}})})["catch"](function(a){e.status(400).jsonp({status:"error",code:"400000",message:"An error occured, the document was not updated",data:{}}),logger.error("[ ControllerRoutes.put ] - error : "+a)})})},h.post=function(a,b){g.router.post(b,function(c,d){logger.debug("[ ControllerRoutes.post ] - revceiving request, route is : "+b),a.create(c.body).then(function(a){d.status(200).jsonp({status:"success",code:"200000",message:"The document(s) was created",data:a})})["catch"](function(a){d.status(400).jsonp({status:"error",code:"400000",message:"An error occured, the document was not created",data:{}}),logger.error("[ ControllerRoutes.post ] - error : "+a)})})};var i=g.models.db.getModel(b);return i?(logger.debug("[ ControllerRoutes.addRoute ] - adding new route, path : "+a),_.each(_.difference(g.ALL_HTTP_REQUESTS,c),function(b){h[b](i,a,d,b)},this),_.each(e.methods,function(c){try{var d=path.normalize(a+"/"+c.path),e=require(path.normalize(f+b.toLowerCase()+".js"));if(_.isUndefined(e[c.fn]))throw" Function '"+c.fn+"' not found";g.router[c.method](d,function(a,b,d){e[c.fn](a,b,d,i)})}catch(h){logger.error("[ ControllerRoutes.addRoute ] - can't add specifiq route : '"+c.sync+"' for model : '"+b+"', more details : "+h)}}),!0):(logger.error("[ ControllerRoutes.addRoute ] - can't add route : '"+a+"' ,because model is not defined"),!1)},RouteController.prototype.init=function(a,b,c){logger.debug("[ ControllerRoutes.init ] - start");var d={};if(!_.isString(a)||!_.isString(c)||_.isEmpty(a)||_.isEmpty(c))return!1;try{fs.accessSync(a),d=JSON.parse(fs.readFileSync(a,"utf-8"))}catch(e){return logger.error("[ ControllerRoutes.init ] - error during loading files, more details : "+e),!1}return this.models=b,_.each(d.routes,function(a){var b=routeJoiSchema.validate(a);if(_.isEmpty(b)||_.isEmpty(b.error)){var d=[];d.push(a.path),_.isEmpty(a.alias)||(d.push(a.alias),d=_.flatten(d)),_.each(d,function(b){this.addRoute(b,a.model,a.excluded,a.param,a,c)},this)}else logger.error("[ ControllerRoutes.init ] - Joi Validation failed ; error when trying to add a new route, please check the file : 'routes.json'"),_.each(b.error.details,function(a){logger.warning("[ ControllerRoutes.init ] - "+a.message+" at "+a.path)})},this),!0},module.exports=new RouteController;